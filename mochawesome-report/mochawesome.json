{
  "stats": {
    "suites": 8,
    "tests": 47,
    "passes": 31,
    "pending": 0,
    "failures": 16,
    "start": "2022-12-09T18:31:02.205Z",
    "end": "2022-12-09T18:31:02.219Z",
    "duration": 14,
    "testsRegistered": 47,
    "passPercent": 65.95744680851064,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "353a1f39-18c1-4722-a7df-d5123abd7b0d",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e1826ae6-b331-41b3-ae1a-69227357ed54",
          "title": "Add",
          "fullFile": "/Users/opa/testCourse/swTestingCourse2022/test/add.test.js",
          "file": "/test/add.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adds zero to positive number",
              "fullTitle": "Add Adds zero to positive number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(0,3)).to.equal(3)",
              "err": {},
              "uuid": "cdde25f0-985b-41a0-8d3d-1352e2528cf5",
              "parentUUID": "e1826ae6-b331-41b3-ae1a-69227357ed54",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds positive number to zero",
              "fullTitle": "Add Adds positive number to zero",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(3,0)).to.equal(3)",
              "err": {},
              "uuid": "e60e81dd-9484-4951-975f-30b20b4c378e",
              "parentUUID": "e1826ae6-b331-41b3-ae1a-69227357ed54",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds zero to negative number",
              "fullTitle": "Add Adds zero to negative number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(0,-3)).to.equal(-3)",
              "err": {},
              "uuid": "4854d84d-6a07-40fc-811e-3bce312d1e44",
              "parentUUID": "e1826ae6-b331-41b3-ae1a-69227357ed54",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds negative number to zero",
              "fullTitle": "Add Adds negative number to zero",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(-3,0)).to.equal(-3)",
              "err": {},
              "uuid": "39281102-453b-40df-a1af-68e565b45daf",
              "parentUUID": "e1826ae6-b331-41b3-ae1a-69227357ed54",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds positive number to positive number",
              "fullTitle": "Add Adds positive number to positive number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(3,6)).to.equal(9)",
              "err": {},
              "uuid": "fddabf4e-fb7d-471b-b5c9-aa7ec1ea34db",
              "parentUUID": "e1826ae6-b331-41b3-ae1a-69227357ed54",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds negative number to negative number",
              "fullTitle": "Add Adds negative number to negative number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(-3,-6)).to.equal(-9)",
              "err": {},
              "uuid": "e0de8a39-50f6-4edc-8d28-beacd1f4eec7",
              "parentUUID": "e1826ae6-b331-41b3-ae1a-69227357ed54",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds string to positive number",
              "fullTitle": "Add Adds string to positive number",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(add(\"abc\",6)).to.equal(RangeError)",
              "err": {
                "message": "AssertionError: expected 'abc6' to equal [Function RangeError]",
                "estack": "AssertionError: expected 'abc6' to equal [Function RangeError]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/add.test.js:27:29)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "34fa4e53-2d93-4c88-9f55-54f3cfb2d482",
              "parentUUID": "e1826ae6-b331-41b3-ae1a-69227357ed54",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds null to positive number",
              "fullTitle": "Add Adds null to positive number",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(add(null,6)).to.equal(RangeError)",
              "err": {
                "message": "AssertionError: expected 6 to equal [Function RangeError]",
                "estack": "AssertionError: expected 6 to equal [Function RangeError]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/add.test.js:30:28)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "d4478bba-3e73-41b2-9d1b-8ce0488e2442",
              "parentUUID": "e1826ae6-b331-41b3-ae1a-69227357ed54",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds boolean to positive number",
              "fullTitle": "Add Adds boolean to positive number",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(add(true,6)).to.equal(RangeError)",
              "err": {
                "message": "AssertionError: expected 7 to equal [Function RangeError]",
                "estack": "AssertionError: expected 7 to equal [Function RangeError]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/add.test.js:33:28)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "7155c467-9bcd-4286-98eb-7a74960f3812",
              "parentUUID": "e1826ae6-b331-41b3-ae1a-69227357ed54",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds positive decimal number to positive decimal number",
              "fullTitle": "Add Adds positive decimal number to positive decimal number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(1.25,2.25)).to.equal(3.5)",
              "err": {},
              "uuid": "3131744f-06bc-4909-84b3-f446dd2fb189",
              "parentUUID": "e1826ae6-b331-41b3-ae1a-69227357ed54",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds positive decimal number to negative decimal number",
              "fullTitle": "Add Adds positive decimal number to negative decimal number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(1.5,-2.25)).to.equal(-0.75)",
              "err": {},
              "uuid": "88d01a16-70eb-497a-af2e-29787b38c76a",
              "parentUUID": "e1826ae6-b331-41b3-ae1a-69227357ed54",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds negative decimal number to negative decimal number",
              "fullTitle": "Add Adds negative decimal number to negative decimal number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(-1.5,-2)).to.equal(-3.5)",
              "err": {},
              "uuid": "50e7ef6e-1713-4c00-814e-03da6c78c957",
              "parentUUID": "e1826ae6-b331-41b3-ae1a-69227357ed54",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cdde25f0-985b-41a0-8d3d-1352e2528cf5",
            "e60e81dd-9484-4951-975f-30b20b4c378e",
            "4854d84d-6a07-40fc-811e-3bce312d1e44",
            "39281102-453b-40df-a1af-68e565b45daf",
            "fddabf4e-fb7d-471b-b5c9-aa7ec1ea34db",
            "e0de8a39-50f6-4edc-8d28-beacd1f4eec7",
            "3131744f-06bc-4909-84b3-f446dd2fb189",
            "88d01a16-70eb-497a-af2e-29787b38c76a",
            "50e7ef6e-1713-4c00-814e-03da6c78c957"
          ],
          "failures": [
            "34fa4e53-2d93-4c88-9f55-54f3cfb2d482",
            "d4478bba-3e73-41b2-9d1b-8ce0488e2442",
            "7155c467-9bcd-4286-98eb-7a74960f3812"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "976c45ec-fea0-49c6-b317-922b7402463d",
          "title": "Capitalize",
          "fullFile": "/Users/opa/testCourse/swTestingCourse2022/test/capitalize.test.js",
          "file": "/test/capitalize.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Test all lowercase in a string",
              "fullTitle": "Capitalize Test all lowercase in a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(\"hello\")).to.equal(\"Hello\")",
              "err": {},
              "uuid": "88567d0b-5f88-456a-8494-b4393ca46e46",
              "parentUUID": "976c45ec-fea0-49c6-b317-922b7402463d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test all uppercase in a string",
              "fullTitle": "Capitalize Test all uppercase in a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(\"HELLO\")).to.equal(\"Hello\")",
              "err": {},
              "uuid": "26668e13-21ef-4c9a-b254-0ea4db6b989d",
              "parentUUID": "976c45ec-fea0-49c6-b317-922b7402463d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test camelCase",
              "fullTitle": "Capitalize Test camelCase",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(\"helloWorld\")).to.equal(\"Helloworld\")",
              "err": {},
              "uuid": "a4c882a1-0103-465c-a21b-ff5f2c3003be",
              "parentUUID": "976c45ec-fea0-49c6-b317-922b7402463d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test empty string",
              "fullTitle": "Capitalize Test empty string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(\"\")).to.equal(\"\")",
              "err": {},
              "uuid": "0e6d61e2-4a1d-477e-9d86-0bf8014e1265",
              "parentUUID": "976c45ec-fea0-49c6-b317-922b7402463d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test one char lowercase",
              "fullTitle": "Capitalize Test one char lowercase",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(\"a\")).to.equal(\"A\")",
              "err": {},
              "uuid": "6977bec7-5b68-42a5-8d2d-3dfcff57e2cb",
              "parentUUID": "976c45ec-fea0-49c6-b317-922b7402463d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test one char uppercase",
              "fullTitle": "Capitalize Test one char uppercase",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(\"B\")).to.equal(\"B\")",
              "err": {},
              "uuid": "da8aedb4-97ef-4b59-8e0c-051b0d1b5fc5",
              "parentUUID": "976c45ec-fea0-49c6-b317-922b7402463d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test integer",
              "fullTitle": "Capitalize Test integer",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(1)).to.equal(RangeError)",
              "err": {
                "message": "AssertionError: expected '1' to equal [Function RangeError]",
                "estack": "AssertionError: expected '1' to equal [Function RangeError]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/capitalize.test.js:27:34)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "70e77eeb-a675-444e-aad4-0778d601045c",
              "parentUUID": "976c45ec-fea0-49c6-b317-922b7402463d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test float",
              "fullTitle": "Capitalize Test float",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(1.1)).to.equal(RangeError)",
              "err": {
                "message": "AssertionError: expected '1.1' to equal [Function RangeError]",
                "estack": "AssertionError: expected '1.1' to equal [Function RangeError]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/capitalize.test.js:30:36)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "8466e9b0-852a-4456-a511-b374b1277d0e",
              "parentUUID": "976c45ec-fea0-49c6-b317-922b7402463d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test boolean",
              "fullTitle": "Capitalize Test boolean",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(true)).to.equal(RangeError)",
              "err": {
                "message": "AssertionError: expected 'True' to equal [Function RangeError]",
                "estack": "AssertionError: expected 'True' to equal [Function RangeError]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/capitalize.test.js:33:37)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "6be136ae-2d93-4a96-9510-e9ab2b8ab9e3",
              "parentUUID": "976c45ec-fea0-49c6-b317-922b7402463d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "88567d0b-5f88-456a-8494-b4393ca46e46",
            "26668e13-21ef-4c9a-b254-0ea4db6b989d",
            "a4c882a1-0103-465c-a21b-ff5f2c3003be",
            "0e6d61e2-4a1d-477e-9d86-0bf8014e1265",
            "6977bec7-5b68-42a5-8d2d-3dfcff57e2cb",
            "da8aedb4-97ef-4b59-8e0c-051b0d1b5fc5"
          ],
          "failures": [
            "70e77eeb-a675-444e-aad4-0778d601045c",
            "8466e9b0-852a-4456-a511-b374b1277d0e",
            "6be136ae-2d93-4a96-9510-e9ab2b8ab9e3"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5e8b1d3c-052b-4f68-9659-b6b5d91ed720",
          "title": "Chunk",
          "fullFile": "/Users/opa/testCourse/swTestingCourse2022/test/chunk.test.js",
          "file": "/test/chunk.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Test with normal array, positive length",
              "fullTitle": "Chunk Test with normal array, positive length",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var testChunk = chunk(normalArray, 2);\n//console.log(testChunk);\nexpect(chunk(normalArray, 2)).to.equal([['a', 'b'], ['c', 'd']]);",
              "err": {
                "message": "AssertionError: expected [ [ 'c', 'd' ], undefined ] to equal [ [ 'a', 'b' ], [ 'c', 'd' ] ]",
                "estack": "AssertionError: expected [ [ 'c', 'd' ], undefined ] to equal [ [ 'a', 'b' ], [ 'c', 'd' ] ]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/chunk.test.js:13:38)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": " [\n   [\n+     \"a\"\n+     \"b\"\n+   ]\n+   [\n     \"c\"\n     \"d\"\n   ]\n ]\n"
              },
              "uuid": "d08ccdd3-dfca-4675-a1e0-0cb758b3b744",
              "parentUUID": "5e8b1d3c-052b-4f68-9659-b6b5d91ed720",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with normal array, longer length",
              "fullTitle": "Chunk Test with normal array, longer length",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var testChunk = chunk(normalArray, 5);\n//console.log(testChunk);\nexpect(chunk(normalArray, 2)).to.equal([['a'],['b'],['c'],['d']]);",
              "err": {
                "message": "AssertionError: expected [ [ 'c', 'd' ], undefined ] to equal [ [ 'a' ], [ 'b' ], [ 'c' ], [ 'd' ] ]",
                "estack": "AssertionError: expected [ [ 'c', 'd' ], undefined ] to equal [ [ 'a' ], [ 'b' ], [ 'c' ], [ 'd' ] ]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/chunk.test.js:18:38)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": " [\n   [\n+     \"a\"\n+   ]\n+   [\n+     \"b\"\n+   ]\n+   [\n     \"c\"\n+   ]\n+   [\n     \"d\"\n   ]\n ]\n"
              },
              "uuid": "e92f723a-37ce-4269-930e-338093f9ee6f",
              "parentUUID": "5e8b1d3c-052b-4f68-9659-b6b5d91ed720",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with odd array, positive length",
              "fullTitle": "Chunk Test with odd array, positive length",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var testChunk = chunk(oddArray, 4);\n//console.log(testChunk);\nexpect(chunk(oddArray, 4)).to.equal([['a'],['b'],['c'],['d', 'e']]);",
              "err": {
                "message": "AssertionError: expected [ [ 'e', undefined, …(2) ], undefined ] to equal [ [ 'a' ], [ 'b' ], [ 'c' ], …(1) ]",
                "estack": "AssertionError: expected [ [ 'e', undefined, …(2) ], undefined ] to equal [ [ 'a' ], [ 'b' ], [ 'c' ], …(1) ]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/chunk.test.js:23:35)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": " [\n   [\n+     \"a\"\n+   ]\n+   [\n+     \"b\"\n+   ]\n+   [\n+     \"c\"\n+   ]\n+   [\n+     \"d\"\n     \"e\"\n-     [undefined]\n-     [undefined]\n-     [undefined]\n   ]\n ]\n"
              },
              "uuid": "47aa2f8b-f9c7-4f74-8f74-c387a79e178c",
              "parentUUID": "5e8b1d3c-052b-4f68-9659-b6b5d91ed720",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with empty array, positive length",
              "fullTitle": "Chunk Test with empty array, positive length",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testChunk = chunk(emptyArray, 2);\n//console.log(testChunk);\nexpect(chunk(emptyArray, 2)).to.eql([]);",
              "err": {},
              "uuid": "e232c07a-cc03-4805-b0fb-6766ce66fdc3",
              "parentUUID": "5e8b1d3c-052b-4f68-9659-b6b5d91ed720",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with normal array, no length",
              "fullTitle": "Chunk Test with normal array, no length",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var testChunk = chunk(normalArray);\n//console.log(testChunk);\nexpect(chunk(normalArray)).to.equal([['a'],['b'],['c'],['d']]);",
              "err": {
                "message": "AssertionError: expected [ [ 'd' ], undefined, undefined, …(1) ] to equal [ [ 'a' ], [ 'b' ], [ 'c' ], [ 'd' ] ]",
                "estack": "AssertionError: expected [ [ 'd' ], undefined, undefined, …(1) ] to equal [ [ 'a' ], [ 'b' ], [ 'c' ], [ 'd' ] ]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/chunk.test.js:33:35)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": " [\n   [\n+     \"a\"\n+   ]\n+   [\n+     \"b\"\n+   ]\n+   [\n+     \"c\"\n+   ]\n+   [\n     \"d\"\n   ]\n ]\n"
              },
              "uuid": "f9dfabb5-041c-4904-9718-1118da03f1c1",
              "parentUUID": "5e8b1d3c-052b-4f68-9659-b6b5d91ed720",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with empty array, no length",
              "fullTitle": "Chunk Test with empty array, no length",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var testChunk = chunk(normalArray);\n//console.log(testChunk);\nexpect(chunk(normalArray)).to.eql([]);",
              "err": {
                "message": "AssertionError: expected [ [ 'd' ], undefined, undefined, …(1) ] to deeply equal []",
                "estack": "AssertionError: expected [ [ 'd' ], undefined, undefined, …(1) ] to deeply equal []\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/chunk.test.js:38:35)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": "- [\n-   [\n-     \"d\"\n-   ]\n- ]\n+ []\n"
              },
              "uuid": "188e1b26-0616-44ad-9bb1-5e015c57e51c",
              "parentUUID": "5e8b1d3c-052b-4f68-9659-b6b5d91ed720",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with normal array, negative length",
              "fullTitle": "Chunk Test with normal array, negative length",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var testChunk = chunk(normalArray);\n//console.log(testChunk);\nexpect(chunk(normalArray)).to.equal([['a','b'],['c','d']]);",
              "err": {
                "message": "AssertionError: expected [ [ 'd' ], undefined, undefined, …(1) ] to equal [ [ 'a', 'b' ], [ 'c', 'd' ] ]",
                "estack": "AssertionError: expected [ [ 'd' ], undefined, undefined, …(1) ] to equal [ [ 'a', 'b' ], [ 'c', 'd' ] ]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/chunk.test.js:43:35)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": " [\n   [\n+     \"a\"\n+     \"b\"\n+   ]\n+   [\n+     \"c\"\n     \"d\"\n   ]\n ]\n"
              },
              "uuid": "b86efffc-feb9-41a7-99d6-93f79c0f1540",
              "parentUUID": "5e8b1d3c-052b-4f68-9659-b6b5d91ed720",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with empty array, negative length",
              "fullTitle": "Chunk Test with empty array, negative length",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testChunk = chunk(normalArray, -2);\n//console.log(testChunk);\nexpect(chunk(normalArray, -2)).to.eql([]);",
              "err": {},
              "uuid": "8202919b-b07e-4171-a165-c7a64dfc629f",
              "parentUUID": "5e8b1d3c-052b-4f68-9659-b6b5d91ed720",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with normal array, length as string",
              "fullTitle": "Chunk Test with normal array, length as string",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var testChunk = chunk(normalArray, '1');\n//console.log(testChunk);\nexpect(chunk(normalArray, '1')).to.equal([['a'],['b'],['c'],['d']]);",
              "err": {
                "message": "AssertionError: expected [ [ 'd' ], undefined, undefined, …(1) ] to equal [ [ 'a' ], [ 'b' ], [ 'c' ], [ 'd' ] ]",
                "estack": "AssertionError: expected [ [ 'd' ], undefined, undefined, …(1) ] to equal [ [ 'a' ], [ 'b' ], [ 'c' ], [ 'd' ] ]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/chunk.test.js:53:40)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": " [\n   [\n+     \"a\"\n+   ]\n+   [\n+     \"b\"\n+   ]\n+   [\n+     \"c\"\n+   ]\n+   [\n     \"d\"\n   ]\n ]\n"
              },
              "uuid": "1377736f-986e-463d-b3bd-2692a79b1873",
              "parentUUID": "5e8b1d3c-052b-4f68-9659-b6b5d91ed720",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with normal array, length as alphaChar",
              "fullTitle": "Chunk Test with normal array, length as alphaChar",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testChunk = chunk(normalArray, 'a');\n//console.log(testChunk);\nexpect(chunk(normalArray, 'a')).to.eql([]);",
              "err": {},
              "uuid": "6256f3b3-e899-4599-a4c1-af9f6069c9fe",
              "parentUUID": "5e8b1d3c-052b-4f68-9659-b6b5d91ed720",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e232c07a-cc03-4805-b0fb-6766ce66fdc3",
            "8202919b-b07e-4171-a165-c7a64dfc629f",
            "6256f3b3-e899-4599-a4c1-af9f6069c9fe"
          ],
          "failures": [
            "d08ccdd3-dfca-4675-a1e0-0cb758b3b744",
            "e92f723a-37ce-4269-930e-338093f9ee6f",
            "47aa2f8b-f9c7-4f74-8f74-c387a79e178c",
            "f9dfabb5-041c-4904-9718-1118da03f1c1",
            "188e1b26-0616-44ad-9bb1-5e015c57e51c",
            "b86efffc-feb9-41a7-99d6-93f79c0f1540",
            "1377736f-986e-463d-b3bd-2692a79b1873"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "47628e25-7e22-45e2-90bb-c969d5ffa965",
          "title": "countBy",
          "fullFile": "/Users/opa/testCourse/swTestingCourse2022/test/countBy.test.js",
          "file": "/test/countBy.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Test with normal collection, working function",
              "fullTitle": "countBy Test with normal collection, working function",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var testCountBy = countBy(normalCollection, value => value.active);\n//console.log(testCountBy);\nexpect(countBy(normalCollection, value => value.active)).to.equal({'true': 2, 'false': 1});",
              "err": {
                "message": "AssertionError: expected { true: 1, false: +0 } to equal { true: 2, false: 1 }",
                "estack": "AssertionError: expected { true: 1, false: +0 } to equal { true: 2, false: 1 }\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/countBy.test.js:16:65)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": " {\n-   \"false\": 0\n-   \"true\": 1\n+   \"false\": 1\n+   \"true\": 2\n }\n"
              },
              "uuid": "f210b8ad-63f1-4948-9efe-5719e1292a0b",
              "parentUUID": "47628e25-7e22-45e2-90bb-c969d5ffa965",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with normal collection, incorrect function",
              "fullTitle": "countBy Test with normal collection, incorrect function",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var testCountBy = countBy(normalCollection, wrong => wrong.nothing);\n//console.log(testCountBy);\nexpect(countBy(normalCollection, wrong => wrong.nothing)).to.eql({});",
              "err": {
                "message": "AssertionError: expected { undefined: 2 } to deeply equal {}",
                "estack": "AssertionError: expected { undefined: 2 } to deeply equal {}\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/countBy.test.js:21:66)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": "- {\n-   \"undefined\": 2\n- }\n+ {}\n"
              },
              "uuid": "fb560476-3173-42b1-aa70-4784ba1f1ac6",
              "parentUUID": "47628e25-7e22-45e2-90bb-c969d5ffa965",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with empty collection, working function",
              "fullTitle": "countBy Test with empty collection, working function",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testCountBy = countBy(emptyCollection, value => value.active);\n//console.log(testCountBy);\nexpect(countBy(emptyCollection, value => value.active)).to.eql({});",
              "err": {},
              "uuid": "b4da510a-7be5-4949-8c00-b9f69305d020",
              "parentUUID": "47628e25-7e22-45e2-90bb-c969d5ffa965",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with empty collection, incorrect function",
              "fullTitle": "countBy Test with empty collection, incorrect function",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testCountBy = countBy(emptyCollection, wrong => wrong.nothing);\n//console.log(testCountBy);\nexpect(countBy(emptyCollection, wrong => wrong.nothing)).to.eql({});",
              "err": {},
              "uuid": "08d0fdc0-f7bc-43aa-ae98-d010cdb64d04",
              "parentUUID": "47628e25-7e22-45e2-90bb-c969d5ffa965",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b4da510a-7be5-4949-8c00-b9f69305d020",
            "08d0fdc0-f7bc-43aa-ae98-d010cdb64d04"
          ],
          "failures": [
            "f210b8ad-63f1-4948-9efe-5719e1292a0b",
            "fb560476-3173-42b1-aa70-4784ba1f1ac6"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5c1ebe7a-8725-44dd-89f9-4f948a8a3707",
          "title": "difference",
          "fullFile": "/Users/opa/testCourse/swTestingCourse2022/test/difference.test.js",
          "file": "/test/difference.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Test with similar arrays",
              "fullTitle": "difference Test with similar arrays",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testDifference = difference(normalArray1, normalArray1);\n//console.log(testDifference);\nexpect(difference(normalArray1, normalArray1)).to.eql([]);",
              "err": {},
              "uuid": "7bebeba7-bb2d-4f69-a8f6-248cb1cc0a5f",
              "parentUUID": "5c1ebe7a-8725-44dd-89f9-4f948a8a3707",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with two arrays",
              "fullTitle": "difference Test with two arrays",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testDifference = difference(normalArray1, normalArray2);\n//console.log(testDifference);\nexpect(difference(normalArray1, normalArray2)).to.eql([1,2]);",
              "err": {},
              "uuid": "df1a638f-4c0f-428b-841c-8ed9a6830eb9",
              "parentUUID": "5c1ebe7a-8725-44dd-89f9-4f948a8a3707",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with empty arrays",
              "fullTitle": "difference Test with empty arrays",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testDifference = difference(emptyArray, emptyArray);\n//console.log(testDifference);\nexpect(difference(emptyArray, emptyArray)).to.eql([]);",
              "err": {},
              "uuid": "e74d5c7c-3f80-4f35-8e33-048511ddf2d0",
              "parentUUID": "5c1ebe7a-8725-44dd-89f9-4f948a8a3707",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with non-arrays",
              "fullTitle": "difference Test with non-arrays",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testDifference = difference(nonArray, nonArray);\n//console.log(testDifference);\nexpect(difference(nonArray, nonArray)).to.eql([]);",
              "err": {},
              "uuid": "c36bebbc-7b49-4157-8863-efb3788d2dbc",
              "parentUUID": "5c1ebe7a-8725-44dd-89f9-4f948a8a3707",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7bebeba7-bb2d-4f69-a8f6-248cb1cc0a5f",
            "df1a638f-4c0f-428b-841c-8ed9a6830eb9",
            "e74d5c7c-3f80-4f35-8e33-048511ddf2d0",
            "c36bebbc-7b49-4157-8863-efb3788d2dbc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "904f29ca-16d2-4a24-8c77-4412faaa4e82",
          "title": "drop",
          "fullFile": "/Users/opa/testCourse/swTestingCourse2022/test/drop.test.js",
          "file": "/test/drop.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Test with normal array, positive number",
              "fullTitle": "drop Test with normal array, positive number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testDrop = drop(normalArray, 2);\n//console.log(testDrop);\nexpect(drop(normalArray, 2)).to.eql([3,4]);",
              "err": {},
              "uuid": "95295af1-0791-4de4-a708-9f4212762d91",
              "parentUUID": "904f29ca-16d2-4a24-8c77-4412faaa4e82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with normal array, bigger number",
              "fullTitle": "drop Test with normal array, bigger number",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testDrop = drop(normalArray, 2);\n//console.log(testDrop);\nexpect(drop(normalArray, 5)).to.eql([]);",
              "err": {},
              "uuid": "e30d8b7b-57f6-4a15-8eb0-74213e35cb97",
              "parentUUID": "904f29ca-16d2-4a24-8c77-4412faaa4e82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with normal array, negative number",
              "fullTitle": "drop Test with normal array, negative number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testDrop = drop(normalArray, -2);\n//console.log(testDrop);\nexpect(drop(normalArray, 2)).to.eql([3,4]);",
              "err": {},
              "uuid": "f306ea40-5c4e-46d9-848f-9a26b438fc12",
              "parentUUID": "904f29ca-16d2-4a24-8c77-4412faaa4e82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with empty array, bigger number",
              "fullTitle": "drop Test with empty array, bigger number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testDrop = drop(emptyArray, 2);\n//console.log(testDrop);\nexpect(drop(emptyArray, 5)).to.eql([]);",
              "err": {},
              "uuid": "50db83f5-c291-4698-8808-2df95cced509",
              "parentUUID": "904f29ca-16d2-4a24-8c77-4412faaa4e82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with non-array, char as number",
              "fullTitle": "drop Test with non-array, char as number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testDrop = drop(nonArray, 'r');\n//console.log(testDrop);\nexpect(drop(nonArray, 'r')).to.eql(['a','r','r','a','y']);",
              "err": {},
              "uuid": "358adff6-bc3f-4a77-b2d2-8a8c4da7a9b4",
              "parentUUID": "904f29ca-16d2-4a24-8c77-4412faaa4e82",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "95295af1-0791-4de4-a708-9f4212762d91",
            "e30d8b7b-57f6-4a15-8eb0-74213e35cb97",
            "f306ea40-5c4e-46d9-848f-9a26b438fc12",
            "50db83f5-c291-4698-8808-2df95cced509",
            "358adff6-bc3f-4a77-b2d2-8a8c4da7a9b4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7fa7b05a-0f81-4918-ad25-c3be114ae148",
          "title": "Filter",
          "fullFile": "/Users/opa/testCourse/swTestingCourse2022/test/filter.test.js",
          "file": "/test/filter.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Test with empty array",
              "fullTitle": "Filter Test with empty array",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(filter(users,({ active }) => active)).to.equal([ { user: 'barney', active: true } ])",
              "err": {
                "message": "AssertionError: expected [ { user: 'barney', active: true } ] to equal [ { user: 'barney', active: true } ]",
                "estack": "AssertionError: expected [ { user: 'barney', active: true } ] to equal [ { user: 'barney', active: true } ]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/filter.test.js:13:54)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": ""
              },
              "uuid": "4a19fbab-ac75-45fc-8791-d9d3f4e1c208",
              "parentUUID": "7fa7b05a-0f81-4918-ad25-c3be114ae148",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "4a19fbab-ac75-45fc-8791-d9d3f4e1c208"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3a1c8bd5-f3f0-4179-89cf-ad2a4c61af11",
          "title": "memoize",
          "fullFile": "/Users/opa/testCourse/swTestingCourse2022/test/memoize.test.js",
          "file": "/test/memoize.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Test with normal objects",
              "fullTitle": "memoize Test with normal objects",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const memoizeFunc = memoize(vals);\n//console.log(memoizeFunc(object));\n//console.log(memoizeFunc(other));\nvar result1 = memoizeFunc(object);\nvar result2 = memoizeFunc(other);\nexpect(result1).to.eql([1,2]);\nexpect(result2).to.eql([3,4]);",
              "err": {},
              "uuid": "a252fbab-7e22-433e-9f58-d6057276f200",
              "parentUUID": "3a1c8bd5-f3f0-4179-89cf-ad2a4c61af11",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with wrong type (no function)",
              "fullTitle": "memoize Test with wrong type (no function)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(()=> {(memoize(\"Memoize\"))}).to.throw('Expected a function');\nexpect(()=> {(memoize(1))}).to.throw('Expected a function');\nexpect(()=> {(memoize(undefined))}).to.throw('Expected a function');",
              "err": {},
              "uuid": "b3788e19-d59a-4c6b-9101-be3ed59967fe",
              "parentUUID": "3a1c8bd5-f3f0-4179-89cf-ad2a4c61af11",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a252fbab-7e22-433e-9f58-d6057276f200",
            "b3788e19-d59a-4c6b-9101-be3ed59967fe"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}