{
  "stats": {
    "suites": 8,
    "tests": 49,
    "passes": 33,
    "pending": 0,
    "failures": 16,
    "start": "2022-12-11T13:05:07.837Z",
    "end": "2022-12-11T13:05:07.852Z",
    "duration": 15,
    "testsRegistered": 49,
    "passPercent": 67.3469387755102,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "bcac0515-074a-4935-b3f2-4c1148fbbbef",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9296c643-f5ca-4da8-a153-0bff7e2ec437",
          "title": "Add",
          "fullFile": "/Users/opa/testCourse/swTestingCourse2022/test/add.test.js",
          "file": "/test/add.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adds zero to positive number",
              "fullTitle": "Add Adds zero to positive number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(0,3)).to.equal(3)",
              "err": {},
              "uuid": "f3afda1d-130b-47e7-8402-abd7ddc332a3",
              "parentUUID": "9296c643-f5ca-4da8-a153-0bff7e2ec437",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds positive number to zero",
              "fullTitle": "Add Adds positive number to zero",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(3,0)).to.equal(3)",
              "err": {},
              "uuid": "d9b07747-4910-4cfa-8408-d1c227c7dda6",
              "parentUUID": "9296c643-f5ca-4da8-a153-0bff7e2ec437",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds zero to negative number",
              "fullTitle": "Add Adds zero to negative number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(0,-3)).to.equal(-3)",
              "err": {},
              "uuid": "4dbc7c77-e9a0-4320-94e1-0751080011aa",
              "parentUUID": "9296c643-f5ca-4da8-a153-0bff7e2ec437",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds negative number to zero",
              "fullTitle": "Add Adds negative number to zero",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(-3,0)).to.equal(-3)",
              "err": {},
              "uuid": "1c1ee1dd-b547-419b-af5a-ddd32b772e16",
              "parentUUID": "9296c643-f5ca-4da8-a153-0bff7e2ec437",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds positive number to positive number",
              "fullTitle": "Add Adds positive number to positive number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(3,6)).to.equal(9)",
              "err": {},
              "uuid": "5bddbd33-01c3-41c2-abe8-937040ef9cf6",
              "parentUUID": "9296c643-f5ca-4da8-a153-0bff7e2ec437",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds negative number to negative number",
              "fullTitle": "Add Adds negative number to negative number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(-3,-6)).to.equal(-9)",
              "err": {},
              "uuid": "37020180-041f-4529-896c-ab082ae9c018",
              "parentUUID": "9296c643-f5ca-4da8-a153-0bff7e2ec437",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds string to positive number",
              "fullTitle": "Add Adds string to positive number",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(add(\"abc\",6)).to.equal(RangeError)",
              "err": {
                "message": "AssertionError: expected 'abc6' to equal [Function RangeError]",
                "estack": "AssertionError: expected 'abc6' to equal [Function RangeError]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/add.test.js:27:29)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "0315c291-9e0e-4fac-b06e-4f369687b1f1",
              "parentUUID": "9296c643-f5ca-4da8-a153-0bff7e2ec437",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds null to positive number",
              "fullTitle": "Add Adds null to positive number",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(add(null,6)).to.equal(RangeError)",
              "err": {
                "message": "AssertionError: expected 6 to equal [Function RangeError]",
                "estack": "AssertionError: expected 6 to equal [Function RangeError]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/add.test.js:30:28)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "03650c44-2c8d-4a05-9d2b-d21d5608eeac",
              "parentUUID": "9296c643-f5ca-4da8-a153-0bff7e2ec437",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds boolean to positive number",
              "fullTitle": "Add Adds boolean to positive number",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(add(true,6)).to.equal(RangeError)",
              "err": {
                "message": "AssertionError: expected 7 to equal [Function RangeError]",
                "estack": "AssertionError: expected 7 to equal [Function RangeError]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/add.test.js:33:28)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "4e9e8cd5-7b55-4c02-8223-e5e44a610c7f",
              "parentUUID": "9296c643-f5ca-4da8-a153-0bff7e2ec437",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds positive decimal number to positive decimal number",
              "fullTitle": "Add Adds positive decimal number to positive decimal number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(1.25,2.25)).to.equal(3.5)",
              "err": {},
              "uuid": "c17b6e24-a7b8-4ee7-a010-8783fbbbcd53",
              "parentUUID": "9296c643-f5ca-4da8-a153-0bff7e2ec437",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds positive decimal number to negative decimal number",
              "fullTitle": "Add Adds positive decimal number to negative decimal number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(1.5,-2.25)).to.equal(-0.75)",
              "err": {},
              "uuid": "7f4766aa-32b6-45ce-9a11-458754f3489c",
              "parentUUID": "9296c643-f5ca-4da8-a153-0bff7e2ec437",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds negative decimal number to negative decimal number",
              "fullTitle": "Add Adds negative decimal number to negative decimal number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(-1.5,-2)).to.equal(-3.5)",
              "err": {},
              "uuid": "117b4971-4f2f-4f40-a6a7-abe6ff48ef55",
              "parentUUID": "9296c643-f5ca-4da8-a153-0bff7e2ec437",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f3afda1d-130b-47e7-8402-abd7ddc332a3",
            "d9b07747-4910-4cfa-8408-d1c227c7dda6",
            "4dbc7c77-e9a0-4320-94e1-0751080011aa",
            "1c1ee1dd-b547-419b-af5a-ddd32b772e16",
            "5bddbd33-01c3-41c2-abe8-937040ef9cf6",
            "37020180-041f-4529-896c-ab082ae9c018",
            "c17b6e24-a7b8-4ee7-a010-8783fbbbcd53",
            "7f4766aa-32b6-45ce-9a11-458754f3489c",
            "117b4971-4f2f-4f40-a6a7-abe6ff48ef55"
          ],
          "failures": [
            "0315c291-9e0e-4fac-b06e-4f369687b1f1",
            "03650c44-2c8d-4a05-9d2b-d21d5608eeac",
            "4e9e8cd5-7b55-4c02-8223-e5e44a610c7f"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "dd7a474b-ab4b-4698-b144-ce02ea852627",
          "title": "Capitalize",
          "fullFile": "/Users/opa/testCourse/swTestingCourse2022/test/capitalize.test.js",
          "file": "/test/capitalize.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Test all lowercase in a string",
              "fullTitle": "Capitalize Test all lowercase in a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(\"hello\")).to.equal(\"Hello\")",
              "err": {},
              "uuid": "b5a4568e-cbbb-4eec-86d9-559277c209b5",
              "parentUUID": "dd7a474b-ab4b-4698-b144-ce02ea852627",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test all uppercase in a string",
              "fullTitle": "Capitalize Test all uppercase in a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(\"HELLO\")).to.equal(\"Hello\")",
              "err": {},
              "uuid": "2b335873-0bad-43ee-a1ad-b1a10aadd774",
              "parentUUID": "dd7a474b-ab4b-4698-b144-ce02ea852627",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test camelCase",
              "fullTitle": "Capitalize Test camelCase",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(\"helloWorld\")).to.equal(\"Helloworld\")",
              "err": {},
              "uuid": "5b186ba8-e9fb-41d8-945e-e5e9cd04e034",
              "parentUUID": "dd7a474b-ab4b-4698-b144-ce02ea852627",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test empty string",
              "fullTitle": "Capitalize Test empty string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(\"\")).to.equal(\"\")",
              "err": {},
              "uuid": "2e55dc3f-5aa8-45a5-bafd-a40ec2757777",
              "parentUUID": "dd7a474b-ab4b-4698-b144-ce02ea852627",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test one char lowercase",
              "fullTitle": "Capitalize Test one char lowercase",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(\"a\")).to.equal(\"A\")",
              "err": {},
              "uuid": "fb4b6632-da3f-4ad0-a4fc-93570e270817",
              "parentUUID": "dd7a474b-ab4b-4698-b144-ce02ea852627",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test one char uppercase",
              "fullTitle": "Capitalize Test one char uppercase",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(\"B\")).to.equal(\"B\")",
              "err": {},
              "uuid": "2a561a62-3ec2-4cb5-a9d6-9bf17b52bdab",
              "parentUUID": "dd7a474b-ab4b-4698-b144-ce02ea852627",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test integer",
              "fullTitle": "Capitalize Test integer",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(1)).to.equal(RangeError)",
              "err": {
                "message": "AssertionError: expected '1' to equal [Function RangeError]",
                "estack": "AssertionError: expected '1' to equal [Function RangeError]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/capitalize.test.js:27:34)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "c10d2adb-dccc-4349-be6c-d18571f603a3",
              "parentUUID": "dd7a474b-ab4b-4698-b144-ce02ea852627",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test float",
              "fullTitle": "Capitalize Test float",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(1.1)).to.equal(RangeError)",
              "err": {
                "message": "AssertionError: expected '1.1' to equal [Function RangeError]",
                "estack": "AssertionError: expected '1.1' to equal [Function RangeError]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/capitalize.test.js:30:36)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "e6b7ac45-b403-4fcb-8daa-85a0d59cbf8e",
              "parentUUID": "dd7a474b-ab4b-4698-b144-ce02ea852627",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test boolean",
              "fullTitle": "Capitalize Test boolean",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(true)).to.equal(RangeError)",
              "err": {
                "message": "AssertionError: expected 'True' to equal [Function RangeError]",
                "estack": "AssertionError: expected 'True' to equal [Function RangeError]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/capitalize.test.js:33:37)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "7e8b7b47-ffa5-414e-bd50-e189895063e8",
              "parentUUID": "dd7a474b-ab4b-4698-b144-ce02ea852627",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b5a4568e-cbbb-4eec-86d9-559277c209b5",
            "2b335873-0bad-43ee-a1ad-b1a10aadd774",
            "5b186ba8-e9fb-41d8-945e-e5e9cd04e034",
            "2e55dc3f-5aa8-45a5-bafd-a40ec2757777",
            "fb4b6632-da3f-4ad0-a4fc-93570e270817",
            "2a561a62-3ec2-4cb5-a9d6-9bf17b52bdab"
          ],
          "failures": [
            "c10d2adb-dccc-4349-be6c-d18571f603a3",
            "e6b7ac45-b403-4fcb-8daa-85a0d59cbf8e",
            "7e8b7b47-ffa5-414e-bd50-e189895063e8"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0bec38c7-e282-477b-a169-5bc4f5764d17",
          "title": "Chunk",
          "fullFile": "/Users/opa/testCourse/swTestingCourse2022/test/chunk.test.js",
          "file": "/test/chunk.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Test with normal array, positive length",
              "fullTitle": "Chunk Test with normal array, positive length",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var testChunk = chunk(normalArray, 2);\n//console.log(testChunk);\nexpect(chunk(normalArray, 2)).to.equal([['a', 'b'], ['c', 'd']]);",
              "err": {
                "message": "AssertionError: expected [ [ 'c', 'd' ], undefined ] to equal [ [ 'a', 'b' ], [ 'c', 'd' ] ]",
                "estack": "AssertionError: expected [ [ 'c', 'd' ], undefined ] to equal [ [ 'a', 'b' ], [ 'c', 'd' ] ]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/chunk.test.js:13:38)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": " [\n   [\n+     \"a\"\n+     \"b\"\n+   ]\n+   [\n     \"c\"\n     \"d\"\n   ]\n ]\n"
              },
              "uuid": "44797457-a24b-43ad-8d38-bc6f50546e56",
              "parentUUID": "0bec38c7-e282-477b-a169-5bc4f5764d17",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with normal array, longer length",
              "fullTitle": "Chunk Test with normal array, longer length",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var testChunk = chunk(normalArray, 5);\n//console.log(testChunk);\nexpect(chunk(normalArray, 2)).to.equal([['a'],['b'],['c'],['d']]);",
              "err": {
                "message": "AssertionError: expected [ [ 'c', 'd' ], undefined ] to equal [ [ 'a' ], [ 'b' ], [ 'c' ], [ 'd' ] ]",
                "estack": "AssertionError: expected [ [ 'c', 'd' ], undefined ] to equal [ [ 'a' ], [ 'b' ], [ 'c' ], [ 'd' ] ]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/chunk.test.js:18:38)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": " [\n   [\n+     \"a\"\n+   ]\n+   [\n+     \"b\"\n+   ]\n+   [\n     \"c\"\n+   ]\n+   [\n     \"d\"\n   ]\n ]\n"
              },
              "uuid": "17dd1bc5-e876-46b0-bbd6-2466b69f5c2d",
              "parentUUID": "0bec38c7-e282-477b-a169-5bc4f5764d17",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with odd array, positive length",
              "fullTitle": "Chunk Test with odd array, positive length",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var testChunk = chunk(oddArray, 4);\n//console.log(testChunk);\nexpect(chunk(oddArray, 4)).to.equal([['a'],['b'],['c'],['d', 'e']]);",
              "err": {
                "message": "AssertionError: expected [ [ 'e', undefined, …(2) ], undefined ] to equal [ [ 'a' ], [ 'b' ], [ 'c' ], …(1) ]",
                "estack": "AssertionError: expected [ [ 'e', undefined, …(2) ], undefined ] to equal [ [ 'a' ], [ 'b' ], [ 'c' ], …(1) ]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/chunk.test.js:23:35)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": " [\n   [\n+     \"a\"\n+   ]\n+   [\n+     \"b\"\n+   ]\n+   [\n+     \"c\"\n+   ]\n+   [\n+     \"d\"\n     \"e\"\n-     [undefined]\n-     [undefined]\n-     [undefined]\n   ]\n ]\n"
              },
              "uuid": "17916d2d-6d28-4431-b041-cfdd9944e1bc",
              "parentUUID": "0bec38c7-e282-477b-a169-5bc4f5764d17",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with empty array, positive length",
              "fullTitle": "Chunk Test with empty array, positive length",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testChunk = chunk(emptyArray, 2);\n//console.log(testChunk);\nexpect(chunk(emptyArray, 2)).to.eql([]);",
              "err": {},
              "uuid": "66ab8d0b-0ffb-4954-b104-3e4149898ef6",
              "parentUUID": "0bec38c7-e282-477b-a169-5bc4f5764d17",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with normal array, no length",
              "fullTitle": "Chunk Test with normal array, no length",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var testChunk = chunk(normalArray);\n//console.log(testChunk);\nexpect(chunk(normalArray)).to.equal([['a'],['b'],['c'],['d']]);",
              "err": {
                "message": "AssertionError: expected [ [ 'd' ], undefined, undefined, …(1) ] to equal [ [ 'a' ], [ 'b' ], [ 'c' ], [ 'd' ] ]",
                "estack": "AssertionError: expected [ [ 'd' ], undefined, undefined, …(1) ] to equal [ [ 'a' ], [ 'b' ], [ 'c' ], [ 'd' ] ]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/chunk.test.js:33:35)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": " [\n   [\n+     \"a\"\n+   ]\n+   [\n+     \"b\"\n+   ]\n+   [\n+     \"c\"\n+   ]\n+   [\n     \"d\"\n   ]\n ]\n"
              },
              "uuid": "c3becd13-b02d-4dc7-846d-d09462b0dea7",
              "parentUUID": "0bec38c7-e282-477b-a169-5bc4f5764d17",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with empty array, no length",
              "fullTitle": "Chunk Test with empty array, no length",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var testChunk = chunk(normalArray);\n//console.log(testChunk);\nexpect(chunk(normalArray)).to.eql([]);",
              "err": {
                "message": "AssertionError: expected [ [ 'd' ], undefined, undefined, …(1) ] to deeply equal []",
                "estack": "AssertionError: expected [ [ 'd' ], undefined, undefined, …(1) ] to deeply equal []\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/chunk.test.js:38:35)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": "- [\n-   [\n-     \"d\"\n-   ]\n- ]\n+ []\n"
              },
              "uuid": "1827063f-631b-4e9f-85c7-4fb0a303a980",
              "parentUUID": "0bec38c7-e282-477b-a169-5bc4f5764d17",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with normal array, negative length",
              "fullTitle": "Chunk Test with normal array, negative length",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var testChunk = chunk(normalArray);\n//console.log(testChunk);\nexpect(chunk(normalArray)).to.equal([['a','b'],['c','d']]);",
              "err": {
                "message": "AssertionError: expected [ [ 'd' ], undefined, undefined, …(1) ] to equal [ [ 'a', 'b' ], [ 'c', 'd' ] ]",
                "estack": "AssertionError: expected [ [ 'd' ], undefined, undefined, …(1) ] to equal [ [ 'a', 'b' ], [ 'c', 'd' ] ]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/chunk.test.js:43:35)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": " [\n   [\n+     \"a\"\n+     \"b\"\n+   ]\n+   [\n+     \"c\"\n     \"d\"\n   ]\n ]\n"
              },
              "uuid": "4e98de6b-4551-4bf3-ae0b-b71dcae8993f",
              "parentUUID": "0bec38c7-e282-477b-a169-5bc4f5764d17",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with empty array, negative length",
              "fullTitle": "Chunk Test with empty array, negative length",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testChunk = chunk(normalArray, -2);\n//console.log(testChunk);\nexpect(chunk(normalArray, -2)).to.eql([]);",
              "err": {},
              "uuid": "29695f0b-b9ed-492b-a942-60c317742f64",
              "parentUUID": "0bec38c7-e282-477b-a169-5bc4f5764d17",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with normal array, length as string",
              "fullTitle": "Chunk Test with normal array, length as string",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var testChunk = chunk(normalArray, '1');\n//console.log(testChunk);\nexpect(chunk(normalArray, '1')).to.equal([['a'],['b'],['c'],['d']]);",
              "err": {
                "message": "AssertionError: expected [ [ 'd' ], undefined, undefined, …(1) ] to equal [ [ 'a' ], [ 'b' ], [ 'c' ], [ 'd' ] ]",
                "estack": "AssertionError: expected [ [ 'd' ], undefined, undefined, …(1) ] to equal [ [ 'a' ], [ 'b' ], [ 'c' ], [ 'd' ] ]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/chunk.test.js:53:40)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": " [\n   [\n+     \"a\"\n+   ]\n+   [\n+     \"b\"\n+   ]\n+   [\n+     \"c\"\n+   ]\n+   [\n     \"d\"\n   ]\n ]\n"
              },
              "uuid": "d134c36e-5d5e-4b38-a5ae-c44bb2a44201",
              "parentUUID": "0bec38c7-e282-477b-a169-5bc4f5764d17",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with normal array, length as alphaChar",
              "fullTitle": "Chunk Test with normal array, length as alphaChar",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testChunk = chunk(normalArray, 'a');\n//console.log(testChunk);\nexpect(chunk(normalArray, 'a')).to.eql([]);",
              "err": {},
              "uuid": "793fc47b-456b-4b39-93e5-115c07de663e",
              "parentUUID": "0bec38c7-e282-477b-a169-5bc4f5764d17",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "66ab8d0b-0ffb-4954-b104-3e4149898ef6",
            "29695f0b-b9ed-492b-a942-60c317742f64",
            "793fc47b-456b-4b39-93e5-115c07de663e"
          ],
          "failures": [
            "44797457-a24b-43ad-8d38-bc6f50546e56",
            "17dd1bc5-e876-46b0-bbd6-2466b69f5c2d",
            "17916d2d-6d28-4431-b041-cfdd9944e1bc",
            "c3becd13-b02d-4dc7-846d-d09462b0dea7",
            "1827063f-631b-4e9f-85c7-4fb0a303a980",
            "4e98de6b-4551-4bf3-ae0b-b71dcae8993f",
            "d134c36e-5d5e-4b38-a5ae-c44bb2a44201"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "76ee2683-f1c2-4493-b860-bf3482b8c78c",
          "title": "countBy",
          "fullFile": "/Users/opa/testCourse/swTestingCourse2022/test/countBy.test.js",
          "file": "/test/countBy.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Test with normal collection, working function",
              "fullTitle": "countBy Test with normal collection, working function",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var testCountBy = countBy(normalCollection, value => value.active);\n//console.log(testCountBy);\nexpect(countBy(normalCollection, value => value.active)).to.equal({'true': 2, 'false': 1});",
              "err": {
                "message": "AssertionError: expected { true: 1, false: +0 } to equal { true: 2, false: 1 }",
                "estack": "AssertionError: expected { true: 1, false: +0 } to equal { true: 2, false: 1 }\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/countBy.test.js:16:65)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": " {\n-   \"false\": 0\n-   \"true\": 1\n+   \"false\": 1\n+   \"true\": 2\n }\n"
              },
              "uuid": "9e717154-5620-4207-880c-8b26dec5a2b0",
              "parentUUID": "76ee2683-f1c2-4493-b860-bf3482b8c78c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with normal collection, incorrect function",
              "fullTitle": "countBy Test with normal collection, incorrect function",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var testCountBy = countBy(normalCollection, wrong => wrong.nothing);\n//console.log(testCountBy);\nexpect(countBy(normalCollection, wrong => wrong.nothing)).to.eql({});",
              "err": {
                "message": "AssertionError: expected { undefined: 2 } to deeply equal {}",
                "estack": "AssertionError: expected { undefined: 2 } to deeply equal {}\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/countBy.test.js:21:66)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": "- {\n-   \"undefined\": 2\n- }\n+ {}\n"
              },
              "uuid": "8ae023b5-d7da-444f-96bd-0968a75a6526",
              "parentUUID": "76ee2683-f1c2-4493-b860-bf3482b8c78c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with empty collection, working function",
              "fullTitle": "countBy Test with empty collection, working function",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testCountBy = countBy(emptyCollection, value => value.active);\n//console.log(testCountBy);\nexpect(countBy(emptyCollection, value => value.active)).to.eql({});",
              "err": {},
              "uuid": "ed2ef36a-017e-4815-b65c-aef45ac2158e",
              "parentUUID": "76ee2683-f1c2-4493-b860-bf3482b8c78c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with empty collection, incorrect function",
              "fullTitle": "countBy Test with empty collection, incorrect function",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testCountBy = countBy(emptyCollection, wrong => wrong.nothing);\n//console.log(testCountBy);\nexpect(countBy(emptyCollection, wrong => wrong.nothing)).to.eql({});",
              "err": {},
              "uuid": "41c828a2-ebcf-4a98-8350-a9e5dc7f2d69",
              "parentUUID": "76ee2683-f1c2-4493-b860-bf3482b8c78c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ed2ef36a-017e-4815-b65c-aef45ac2158e",
            "41c828a2-ebcf-4a98-8350-a9e5dc7f2d69"
          ],
          "failures": [
            "9e717154-5620-4207-880c-8b26dec5a2b0",
            "8ae023b5-d7da-444f-96bd-0968a75a6526"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "397e2301-c64d-499d-81dd-700a1f2fd254",
          "title": "difference",
          "fullFile": "/Users/opa/testCourse/swTestingCourse2022/test/difference.test.js",
          "file": "/test/difference.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Test with similar arrays",
              "fullTitle": "difference Test with similar arrays",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testDifference = difference(normalArray1, normalArray1);\n//console.log(testDifference);\nexpect(difference(normalArray1, normalArray1)).to.eql([]);",
              "err": {},
              "uuid": "f2d2919e-e4f4-4c51-bf6a-4497ebcddf6e",
              "parentUUID": "397e2301-c64d-499d-81dd-700a1f2fd254",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with two arrays",
              "fullTitle": "difference Test with two arrays",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testDifference = difference(normalArray1, normalArray2);\n//console.log(testDifference);\nexpect(difference(normalArray1, normalArray2)).to.eql([1,2]);",
              "err": {},
              "uuid": "20a92614-4004-45ec-b810-303eef1f43a6",
              "parentUUID": "397e2301-c64d-499d-81dd-700a1f2fd254",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with empty arrays",
              "fullTitle": "difference Test with empty arrays",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testDifference = difference(emptyArray, emptyArray);\n//console.log(testDifference);\nexpect(difference(emptyArray, emptyArray)).to.eql([]);",
              "err": {},
              "uuid": "7a75693e-df3e-4676-b9a4-771dec82c718",
              "parentUUID": "397e2301-c64d-499d-81dd-700a1f2fd254",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with non-arrays",
              "fullTitle": "difference Test with non-arrays",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testDifference = difference(nonArray, nonArray);\n//console.log(testDifference);\nexpect(difference(nonArray, nonArray)).to.eql([]);",
              "err": {},
              "uuid": "698bad90-0a83-4697-9001-3cb43de8d28f",
              "parentUUID": "397e2301-c64d-499d-81dd-700a1f2fd254",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f2d2919e-e4f4-4c51-bf6a-4497ebcddf6e",
            "20a92614-4004-45ec-b810-303eef1f43a6",
            "7a75693e-df3e-4676-b9a4-771dec82c718",
            "698bad90-0a83-4697-9001-3cb43de8d28f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7954fe98-e1c0-4c26-a87c-77413b5783f5",
          "title": "drop",
          "fullFile": "/Users/opa/testCourse/swTestingCourse2022/test/drop.test.js",
          "file": "/test/drop.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Test with normal array, positive number",
              "fullTitle": "drop Test with normal array, positive number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testDrop = drop(normalArray, 2);\n//console.log(testDrop);\nexpect(drop(normalArray, 2)).to.eql([3,4]);",
              "err": {},
              "uuid": "893fe455-2dc1-426b-afb8-e87c415c16ad",
              "parentUUID": "7954fe98-e1c0-4c26-a87c-77413b5783f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with normal array, bigger number",
              "fullTitle": "drop Test with normal array, bigger number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testDrop = drop(normalArray, 2);\n//console.log(testDrop);\nexpect(drop(normalArray, 5)).to.eql([]);",
              "err": {},
              "uuid": "4ad023ba-9a8d-4624-8205-7b3fa1920ad4",
              "parentUUID": "7954fe98-e1c0-4c26-a87c-77413b5783f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with normal array, negative number",
              "fullTitle": "drop Test with normal array, negative number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testDrop = drop(normalArray, -2);\n//console.log(testDrop);\nexpect(drop(normalArray, 2)).to.eql([3,4]);",
              "err": {},
              "uuid": "f3ea4877-bf2a-40e2-a286-0f9736184a76",
              "parentUUID": "7954fe98-e1c0-4c26-a87c-77413b5783f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with empty array, bigger number",
              "fullTitle": "drop Test with empty array, bigger number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testDrop = drop(emptyArray, 2);\n//console.log(testDrop);\nexpect(drop(emptyArray, 5)).to.eql([]);",
              "err": {},
              "uuid": "9d1a68c4-59bd-4888-a2a8-c037709e542e",
              "parentUUID": "7954fe98-e1c0-4c26-a87c-77413b5783f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with non-array, char as number",
              "fullTitle": "drop Test with non-array, char as number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testDrop = drop(nonArray, 'r');\n//console.log(testDrop);\nexpect(drop(nonArray, 'r')).to.eql(['a','r','r','a','y']);",
              "err": {},
              "uuid": "65b5a0c5-29a1-464f-861f-caa1acb2e4c8",
              "parentUUID": "7954fe98-e1c0-4c26-a87c-77413b5783f5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "893fe455-2dc1-426b-afb8-e87c415c16ad",
            "4ad023ba-9a8d-4624-8205-7b3fa1920ad4",
            "f3ea4877-bf2a-40e2-a286-0f9736184a76",
            "9d1a68c4-59bd-4888-a2a8-c037709e542e",
            "65b5a0c5-29a1-464f-861f-caa1acb2e4c8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a6b93e9c-5edb-40a9-ac2f-a7d7ba86a91f",
          "title": "Filter",
          "fullFile": "/Users/opa/testCourse/swTestingCourse2022/test/filter.test.js",
          "file": "/test/filter.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Test with empty array",
              "fullTitle": "Filter Test with empty array",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(filter(users,({ active }) => active)).to.equal([ { user: 'barney', active: true } ])",
              "err": {
                "message": "AssertionError: expected [ { user: 'barney', active: true } ] to equal [ { user: 'barney', active: true } ]",
                "estack": "AssertionError: expected [ { user: 'barney', active: true } ] to equal [ { user: 'barney', active: true } ]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/filter.test.js:13:54)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": ""
              },
              "uuid": "192f860a-6686-49b7-b646-e8f000cff338",
              "parentUUID": "a6b93e9c-5edb-40a9-ac2f-a7d7ba86a91f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "192f860a-6686-49b7-b646-e8f000cff338"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7f7366ba-0dde-45a4-b879-60cf7960b009",
          "title": "memoize",
          "fullFile": "/Users/opa/testCourse/swTestingCourse2022/test/memoize.test.js",
          "file": "/test/memoize.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Test with normal objects",
              "fullTitle": "memoize Test with normal objects",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const memoizeFunc = memoize(vals);\nvar result1 = memoizeFunc(object);\nvar result2 = memoizeFunc(other);\nexpect(result1).to.eql([1,2]);\nexpect(result2).to.eql([3,4]);",
              "err": {},
              "uuid": "d034e787-07ab-4fe9-8d24-034432456997",
              "parentUUID": "7f7366ba-0dde-45a4-b879-60cf7960b009",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with wrong type (no function)",
              "fullTitle": "memoize Test with wrong type (no function)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(()=> {(memoize(\"Memoize\"))}).to.throw('Expected a function');\nexpect(()=> {(memoize(1))}).to.throw('Expected a function');\nexpect(()=> {(memoize(undefined))}).to.throw('Expected a function');",
              "err": {},
              "uuid": "2a2e7c13-5d90-4b86-a41b-27c8306ece3c",
              "parentUUID": "7f7366ba-0dde-45a4-b879-60cf7960b009",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test cache-setting",
              "fullTitle": "memoize Test cache-setting",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const memoizeFunc = memoize(vals);\nvar result1 = memoizeFunc(object);\nvar result2 = memoizeFunc(other);\nexpect(result1).to.eql([1,2]);\nexpect(result2).to.eql([3,4]);\nmemoizeFunc.cache.set(object, ['a', 'b'])\nmemoizeFunc.cache.set(other, ['c', 'd'])\nexpect(memoizeFunc(object)).to.eql(['a','b']);\nexpect(memoizeFunc(other)).to.eql(['c','d']);",
              "err": {},
              "uuid": "407f21c1-a0af-4719-9003-f3915299f5df",
              "parentUUID": "7f7366ba-0dde-45a4-b879-60cf7960b009",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test output to remain when modifying object",
              "fullTitle": "memoize Test output to remain when modifying object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var anotherObj = {\"a\" : 5, \"b\" : 10};\nconst memoizeFunc = memoize(vals);\nconst referMemo = memoizeFunc(anotherObj);\nanotherObj.a = 10;\nconst result1 = memoizeFunc(anotherObj);\nexpect(result1).to.eql(referMemo);\nexpect(anotherObj).to.eql({\"a\" : 10, \"b\" : 10})",
              "err": {},
              "uuid": "498d5103-82d8-4b19-9c53-60299690d21d",
              "parentUUID": "7f7366ba-0dde-45a4-b879-60cf7960b009",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d034e787-07ab-4fe9-8d24-034432456997",
            "2a2e7c13-5d90-4b86-a41b-27c8306ece3c",
            "407f21c1-a0af-4719-9003-f3915299f5df",
            "498d5103-82d8-4b19-9c53-60299690d21d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}