{
  "stats": {
    "suites": 10,
    "tests": 69,
    "passes": 53,
    "pending": 0,
    "failures": 16,
    "start": "2022-12-18T14:21:01.373Z",
    "end": "2022-12-18T14:21:01.391Z",
    "duration": 18,
    "testsRegistered": 69,
    "passPercent": 76.81159420289855,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "5cfcf338-13f1-4b88-bff2-19cf994521f9",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5208d165-f5b5-4d6f-9df8-70e1fc32a733",
          "title": "Add",
          "fullFile": "/Users/opa/testCourse/swTestingCourse2022/test/add.test.js",
          "file": "/test/add.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adds zero to positive number",
              "fullTitle": "Add Adds zero to positive number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(0,3)).to.equal(3)",
              "err": {},
              "uuid": "73ebb439-9d3c-4f61-b1c3-a2d76d1a87c9",
              "parentUUID": "5208d165-f5b5-4d6f-9df8-70e1fc32a733",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds positive number to zero",
              "fullTitle": "Add Adds positive number to zero",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(3,0)).to.equal(3)",
              "err": {},
              "uuid": "6540cc18-976a-4043-8e77-6b0eecf8152c",
              "parentUUID": "5208d165-f5b5-4d6f-9df8-70e1fc32a733",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds zero to negative number",
              "fullTitle": "Add Adds zero to negative number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(0,-3)).to.equal(-3)",
              "err": {},
              "uuid": "37f77a27-1132-454f-8790-222e8219c7f0",
              "parentUUID": "5208d165-f5b5-4d6f-9df8-70e1fc32a733",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds negative number to zero",
              "fullTitle": "Add Adds negative number to zero",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(-3,0)).to.equal(-3)",
              "err": {},
              "uuid": "ccb59bbd-aa1e-424f-90cf-9ea25db97646",
              "parentUUID": "5208d165-f5b5-4d6f-9df8-70e1fc32a733",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds positive number to positive number",
              "fullTitle": "Add Adds positive number to positive number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(3,6)).to.equal(9)",
              "err": {},
              "uuid": "5bb8cfc8-233c-4166-963d-6a4f3d1f5e91",
              "parentUUID": "5208d165-f5b5-4d6f-9df8-70e1fc32a733",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds negative number to negative number",
              "fullTitle": "Add Adds negative number to negative number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(-3,-6)).to.equal(-9)",
              "err": {},
              "uuid": "c09a9d4e-ad54-4448-981d-9efde5d99b4c",
              "parentUUID": "5208d165-f5b5-4d6f-9df8-70e1fc32a733",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds string to positive number",
              "fullTitle": "Add Adds string to positive number",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(add(\"abc\",6)).to.equal(RangeError)",
              "err": {
                "message": "AssertionError: expected 'abc6' to equal [Function RangeError]",
                "estack": "AssertionError: expected 'abc6' to equal [Function RangeError]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/add.test.js:27:29)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "9af82068-4117-4913-99e8-4d410e3d6410",
              "parentUUID": "5208d165-f5b5-4d6f-9df8-70e1fc32a733",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds null to positive number",
              "fullTitle": "Add Adds null to positive number",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(add(null,6)).to.equal(RangeError)",
              "err": {
                "message": "AssertionError: expected 6 to equal [Function RangeError]",
                "estack": "AssertionError: expected 6 to equal [Function RangeError]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/add.test.js:30:28)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "8a2a23f1-bd3e-4783-bd61-46aabd989f94",
              "parentUUID": "5208d165-f5b5-4d6f-9df8-70e1fc32a733",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds boolean to positive number",
              "fullTitle": "Add Adds boolean to positive number",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(add(true,6)).to.equal(RangeError)",
              "err": {
                "message": "AssertionError: expected 7 to equal [Function RangeError]",
                "estack": "AssertionError: expected 7 to equal [Function RangeError]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/add.test.js:33:28)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "d7ccb42e-f590-4d3c-9403-4245e5d8de61",
              "parentUUID": "5208d165-f5b5-4d6f-9df8-70e1fc32a733",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds positive decimal number to positive decimal number",
              "fullTitle": "Add Adds positive decimal number to positive decimal number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(1.25,2.25)).to.equal(3.5)",
              "err": {},
              "uuid": "20aa7dc8-3c3d-4c53-b37e-44d48793754c",
              "parentUUID": "5208d165-f5b5-4d6f-9df8-70e1fc32a733",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds positive decimal number to negative decimal number",
              "fullTitle": "Add Adds positive decimal number to negative decimal number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(1.5,-2.25)).to.equal(-0.75)",
              "err": {},
              "uuid": "1c0a5b6d-b7a9-4012-8e3b-1c4b67ad85b6",
              "parentUUID": "5208d165-f5b5-4d6f-9df8-70e1fc32a733",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds negative decimal number to negative decimal number",
              "fullTitle": "Add Adds negative decimal number to negative decimal number",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(-1.5,-2)).to.equal(-3.5)",
              "err": {},
              "uuid": "a8d722e2-b6b7-43c3-a4bf-c54641a8a56d",
              "parentUUID": "5208d165-f5b5-4d6f-9df8-70e1fc32a733",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "73ebb439-9d3c-4f61-b1c3-a2d76d1a87c9",
            "6540cc18-976a-4043-8e77-6b0eecf8152c",
            "37f77a27-1132-454f-8790-222e8219c7f0",
            "ccb59bbd-aa1e-424f-90cf-9ea25db97646",
            "5bb8cfc8-233c-4166-963d-6a4f3d1f5e91",
            "c09a9d4e-ad54-4448-981d-9efde5d99b4c",
            "20aa7dc8-3c3d-4c53-b37e-44d48793754c",
            "1c0a5b6d-b7a9-4012-8e3b-1c4b67ad85b6",
            "a8d722e2-b6b7-43c3-a4bf-c54641a8a56d"
          ],
          "failures": [
            "9af82068-4117-4913-99e8-4d410e3d6410",
            "8a2a23f1-bd3e-4783-bd61-46aabd989f94",
            "d7ccb42e-f590-4d3c-9403-4245e5d8de61"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1ee8640d-f3bf-4af1-a8f8-1ffd7e74082f",
          "title": "Capitalize",
          "fullFile": "/Users/opa/testCourse/swTestingCourse2022/test/capitalize.test.js",
          "file": "/test/capitalize.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Test all lowercase in a string",
              "fullTitle": "Capitalize Test all lowercase in a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(\"hello\")).to.equal(\"Hello\")",
              "err": {},
              "uuid": "3f721ccb-5751-4ca9-82b1-7003f6fb2c3a",
              "parentUUID": "1ee8640d-f3bf-4af1-a8f8-1ffd7e74082f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test all uppercase in a string",
              "fullTitle": "Capitalize Test all uppercase in a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(\"HELLO\")).to.equal(\"Hello\")",
              "err": {},
              "uuid": "248d21ba-0eb0-44b4-8549-cc095fc8e8bf",
              "parentUUID": "1ee8640d-f3bf-4af1-a8f8-1ffd7e74082f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test camelCase",
              "fullTitle": "Capitalize Test camelCase",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(\"helloWorld\")).to.equal(\"Helloworld\")",
              "err": {},
              "uuid": "a4aad9a5-662b-4d15-886a-8df4f10f682e",
              "parentUUID": "1ee8640d-f3bf-4af1-a8f8-1ffd7e74082f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test empty string",
              "fullTitle": "Capitalize Test empty string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(\"\")).to.equal(\"\")",
              "err": {},
              "uuid": "d8ae4a2c-d7f1-4e25-bf3b-57592de360ea",
              "parentUUID": "1ee8640d-f3bf-4af1-a8f8-1ffd7e74082f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test one char lowercase",
              "fullTitle": "Capitalize Test one char lowercase",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(\"a\")).to.equal(\"A\")",
              "err": {},
              "uuid": "91e0321f-e8bc-434f-a2ea-d47554b737a8",
              "parentUUID": "1ee8640d-f3bf-4af1-a8f8-1ffd7e74082f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test one char uppercase",
              "fullTitle": "Capitalize Test one char uppercase",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(\"B\")).to.equal(\"B\")",
              "err": {},
              "uuid": "949cac69-748c-4d4c-9a19-b3a0f427e319",
              "parentUUID": "1ee8640d-f3bf-4af1-a8f8-1ffd7e74082f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test integer",
              "fullTitle": "Capitalize Test integer",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(1)).to.equal(RangeError)",
              "err": {
                "message": "AssertionError: expected '1' to equal [Function RangeError]",
                "estack": "AssertionError: expected '1' to equal [Function RangeError]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/capitalize.test.js:27:34)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "9699e627-ac1f-4b91-8e48-2c8779685bd7",
              "parentUUID": "1ee8640d-f3bf-4af1-a8f8-1ffd7e74082f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test float",
              "fullTitle": "Capitalize Test float",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(1.1)).to.equal(RangeError)",
              "err": {
                "message": "AssertionError: expected '1.1' to equal [Function RangeError]",
                "estack": "AssertionError: expected '1.1' to equal [Function RangeError]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/capitalize.test.js:30:36)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "d92cdaf8-bfcc-468b-b6f0-ebbe611fbd2d",
              "parentUUID": "1ee8640d-f3bf-4af1-a8f8-1ffd7e74082f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test boolean",
              "fullTitle": "Capitalize Test boolean",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(true)).to.equal(RangeError)",
              "err": {
                "message": "AssertionError: expected 'True' to equal [Function RangeError]",
                "estack": "AssertionError: expected 'True' to equal [Function RangeError]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/capitalize.test.js:33:37)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "950111f0-608c-422d-a8c9-baa05f732729",
              "parentUUID": "1ee8640d-f3bf-4af1-a8f8-1ffd7e74082f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3f721ccb-5751-4ca9-82b1-7003f6fb2c3a",
            "248d21ba-0eb0-44b4-8549-cc095fc8e8bf",
            "a4aad9a5-662b-4d15-886a-8df4f10f682e",
            "d8ae4a2c-d7f1-4e25-bf3b-57592de360ea",
            "91e0321f-e8bc-434f-a2ea-d47554b737a8",
            "949cac69-748c-4d4c-9a19-b3a0f427e319"
          ],
          "failures": [
            "9699e627-ac1f-4b91-8e48-2c8779685bd7",
            "d92cdaf8-bfcc-468b-b6f0-ebbe611fbd2d",
            "950111f0-608c-422d-a8c9-baa05f732729"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8cd95bfd-2af0-4f95-84c3-3b9705d47553",
          "title": "Chunk",
          "fullFile": "/Users/opa/testCourse/swTestingCourse2022/test/chunk.test.js",
          "file": "/test/chunk.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Test with normal array, positive length",
              "fullTitle": "Chunk Test with normal array, positive length",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var testChunk = chunk(normalArray, 2);\n//console.log(testChunk);\nexpect(chunk(normalArray, 2)).to.equal([['a', 'b'], ['c', 'd']]);",
              "err": {
                "message": "AssertionError: expected [ [ 'c', 'd' ], undefined ] to equal [ [ 'a', 'b' ], [ 'c', 'd' ] ]",
                "estack": "AssertionError: expected [ [ 'c', 'd' ], undefined ] to equal [ [ 'a', 'b' ], [ 'c', 'd' ] ]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/chunk.test.js:13:38)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": " [\n   [\n+     \"a\"\n+     \"b\"\n+   ]\n+   [\n     \"c\"\n     \"d\"\n   ]\n ]\n"
              },
              "uuid": "64fcad9d-d681-48f1-a5f6-9812c40f5ae5",
              "parentUUID": "8cd95bfd-2af0-4f95-84c3-3b9705d47553",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with normal array, longer length",
              "fullTitle": "Chunk Test with normal array, longer length",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var testChunk = chunk(normalArray, 5);\n//console.log(testChunk);\nexpect(chunk(normalArray, 2)).to.equal([['a'],['b'],['c'],['d']]);",
              "err": {
                "message": "AssertionError: expected [ [ 'c', 'd' ], undefined ] to equal [ [ 'a' ], [ 'b' ], [ 'c' ], [ 'd' ] ]",
                "estack": "AssertionError: expected [ [ 'c', 'd' ], undefined ] to equal [ [ 'a' ], [ 'b' ], [ 'c' ], [ 'd' ] ]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/chunk.test.js:18:38)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": " [\n   [\n+     \"a\"\n+   ]\n+   [\n+     \"b\"\n+   ]\n+   [\n     \"c\"\n+   ]\n+   [\n     \"d\"\n   ]\n ]\n"
              },
              "uuid": "2948ce43-e264-4637-8504-4dcc51ee05f4",
              "parentUUID": "8cd95bfd-2af0-4f95-84c3-3b9705d47553",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with odd array, positive length",
              "fullTitle": "Chunk Test with odd array, positive length",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var testChunk = chunk(oddArray, 4);\n//console.log(testChunk);\nexpect(chunk(oddArray, 4)).to.equal([['a'],['b'],['c'],['d', 'e']]);",
              "err": {
                "message": "AssertionError: expected [ [ 'e', undefined, …(2) ], undefined ] to equal [ [ 'a' ], [ 'b' ], [ 'c' ], …(1) ]",
                "estack": "AssertionError: expected [ [ 'e', undefined, …(2) ], undefined ] to equal [ [ 'a' ], [ 'b' ], [ 'c' ], …(1) ]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/chunk.test.js:23:35)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": " [\n   [\n+     \"a\"\n+   ]\n+   [\n+     \"b\"\n+   ]\n+   [\n+     \"c\"\n+   ]\n+   [\n+     \"d\"\n     \"e\"\n-     [undefined]\n-     [undefined]\n-     [undefined]\n   ]\n ]\n"
              },
              "uuid": "d3fa765d-e09f-4fa3-9603-acf3af77a93f",
              "parentUUID": "8cd95bfd-2af0-4f95-84c3-3b9705d47553",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with empty array, positive length",
              "fullTitle": "Chunk Test with empty array, positive length",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testChunk = chunk(emptyArray, 2);\n//console.log(testChunk);\nexpect(chunk(emptyArray, 2)).to.eql([]);",
              "err": {},
              "uuid": "82ff6257-8a1e-49b0-89c3-185fd0ad967b",
              "parentUUID": "8cd95bfd-2af0-4f95-84c3-3b9705d47553",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with normal array, no length",
              "fullTitle": "Chunk Test with normal array, no length",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var testChunk = chunk(normalArray);\n//console.log(testChunk);\nexpect(chunk(normalArray)).to.equal([['a'],['b'],['c'],['d']]);",
              "err": {
                "message": "AssertionError: expected [ [ 'd' ], undefined, undefined, …(1) ] to equal [ [ 'a' ], [ 'b' ], [ 'c' ], [ 'd' ] ]",
                "estack": "AssertionError: expected [ [ 'd' ], undefined, undefined, …(1) ] to equal [ [ 'a' ], [ 'b' ], [ 'c' ], [ 'd' ] ]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/chunk.test.js:33:35)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": " [\n   [\n+     \"a\"\n+   ]\n+   [\n+     \"b\"\n+   ]\n+   [\n+     \"c\"\n+   ]\n+   [\n     \"d\"\n   ]\n ]\n"
              },
              "uuid": "4bc5282a-f366-408a-aff5-b78e14624228",
              "parentUUID": "8cd95bfd-2af0-4f95-84c3-3b9705d47553",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with empty array, no length",
              "fullTitle": "Chunk Test with empty array, no length",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var testChunk = chunk(normalArray);\n//console.log(testChunk);\nexpect(chunk(normalArray)).to.eql([]);",
              "err": {
                "message": "AssertionError: expected [ [ 'd' ], undefined, undefined, …(1) ] to deeply equal []",
                "estack": "AssertionError: expected [ [ 'd' ], undefined, undefined, …(1) ] to deeply equal []\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/chunk.test.js:38:35)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": "- [\n-   [\n-     \"d\"\n-   ]\n- ]\n+ []\n"
              },
              "uuid": "5877253a-b67b-4159-ad8e-18f02e6e41dd",
              "parentUUID": "8cd95bfd-2af0-4f95-84c3-3b9705d47553",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with normal array, negative length",
              "fullTitle": "Chunk Test with normal array, negative length",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var testChunk = chunk(normalArray);\n//console.log(testChunk);\nexpect(chunk(normalArray)).to.equal([['a','b'],['c','d']]);",
              "err": {
                "message": "AssertionError: expected [ [ 'd' ], undefined, undefined, …(1) ] to equal [ [ 'a', 'b' ], [ 'c', 'd' ] ]",
                "estack": "AssertionError: expected [ [ 'd' ], undefined, undefined, …(1) ] to equal [ [ 'a', 'b' ], [ 'c', 'd' ] ]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/chunk.test.js:43:35)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": " [\n   [\n+     \"a\"\n+     \"b\"\n+   ]\n+   [\n+     \"c\"\n     \"d\"\n   ]\n ]\n"
              },
              "uuid": "acddb309-889e-46eb-8529-56a45f4660fa",
              "parentUUID": "8cd95bfd-2af0-4f95-84c3-3b9705d47553",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with empty array, negative length",
              "fullTitle": "Chunk Test with empty array, negative length",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testChunk = chunk(normalArray, -2);\n//console.log(testChunk);\nexpect(chunk(normalArray, -2)).to.eql([]);",
              "err": {},
              "uuid": "20461af2-8cf4-45b8-a899-b8c3b50921af",
              "parentUUID": "8cd95bfd-2af0-4f95-84c3-3b9705d47553",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with normal array, length as string",
              "fullTitle": "Chunk Test with normal array, length as string",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var testChunk = chunk(normalArray, '1');\n//console.log(testChunk);\nexpect(chunk(normalArray, '1')).to.equal([['a'],['b'],['c'],['d']]);",
              "err": {
                "message": "AssertionError: expected [ [ 'd' ], undefined, undefined, …(1) ] to equal [ [ 'a' ], [ 'b' ], [ 'c' ], [ 'd' ] ]",
                "estack": "AssertionError: expected [ [ 'd' ], undefined, undefined, …(1) ] to equal [ [ 'a' ], [ 'b' ], [ 'c' ], [ 'd' ] ]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/chunk.test.js:53:40)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": " [\n   [\n+     \"a\"\n+   ]\n+   [\n+     \"b\"\n+   ]\n+   [\n+     \"c\"\n+   ]\n+   [\n     \"d\"\n   ]\n ]\n"
              },
              "uuid": "72adb2bf-4005-40a8-a849-d81bb61fa19c",
              "parentUUID": "8cd95bfd-2af0-4f95-84c3-3b9705d47553",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with normal array, length as alphaChar",
              "fullTitle": "Chunk Test with normal array, length as alphaChar",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testChunk = chunk(normalArray, 'a');\n//console.log(testChunk);\nexpect(chunk(normalArray, 'a')).to.eql([]);",
              "err": {},
              "uuid": "856f1953-ad39-4d31-9cfd-b031bc4d3fd5",
              "parentUUID": "8cd95bfd-2af0-4f95-84c3-3b9705d47553",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "82ff6257-8a1e-49b0-89c3-185fd0ad967b",
            "20461af2-8cf4-45b8-a899-b8c3b50921af",
            "856f1953-ad39-4d31-9cfd-b031bc4d3fd5"
          ],
          "failures": [
            "64fcad9d-d681-48f1-a5f6-9812c40f5ae5",
            "2948ce43-e264-4637-8504-4dcc51ee05f4",
            "d3fa765d-e09f-4fa3-9603-acf3af77a93f",
            "4bc5282a-f366-408a-aff5-b78e14624228",
            "5877253a-b67b-4159-ad8e-18f02e6e41dd",
            "acddb309-889e-46eb-8529-56a45f4660fa",
            "72adb2bf-4005-40a8-a849-d81bb61fa19c"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4d065947-4cbd-481d-b31b-32ee93d065d9",
          "title": "countBy",
          "fullFile": "/Users/opa/testCourse/swTestingCourse2022/test/countBy.test.js",
          "file": "/test/countBy.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Test with normal collection, working function",
              "fullTitle": "countBy Test with normal collection, working function",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var testCountBy = countBy(normalCollection, value => value.active);\n//console.log(testCountBy);\nexpect(countBy(normalCollection, value => value.active)).to.equal({'true': 2, 'false': 1});",
              "err": {
                "message": "AssertionError: expected { true: 1, false: +0 } to equal { true: 2, false: 1 }",
                "estack": "AssertionError: expected { true: 1, false: +0 } to equal { true: 2, false: 1 }\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/countBy.test.js:16:65)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": " {\n-   \"false\": 0\n-   \"true\": 1\n+   \"false\": 1\n+   \"true\": 2\n }\n"
              },
              "uuid": "1bbdfc1b-d362-477b-83a3-8a30422f89c3",
              "parentUUID": "4d065947-4cbd-481d-b31b-32ee93d065d9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with normal collection, incorrect function",
              "fullTitle": "countBy Test with normal collection, incorrect function",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var testCountBy = countBy(normalCollection, wrong => wrong.nothing);\n//console.log(testCountBy);\nexpect(countBy(normalCollection, wrong => wrong.nothing)).to.eql({});",
              "err": {
                "message": "AssertionError: expected { undefined: 2 } to deeply equal {}",
                "estack": "AssertionError: expected { undefined: 2 } to deeply equal {}\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/countBy.test.js:21:66)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": "- {\n-   \"undefined\": 2\n- }\n+ {}\n"
              },
              "uuid": "99e2b2bd-7836-484e-a35a-9ca1fb58cdc9",
              "parentUUID": "4d065947-4cbd-481d-b31b-32ee93d065d9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with empty collection, working function",
              "fullTitle": "countBy Test with empty collection, working function",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testCountBy = countBy(emptyCollection, value => value.active);\n//console.log(testCountBy);\nexpect(countBy(emptyCollection, value => value.active)).to.eql({});",
              "err": {},
              "uuid": "f30e9510-a63a-493d-afe1-537337689617",
              "parentUUID": "4d065947-4cbd-481d-b31b-32ee93d065d9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with empty collection, incorrect function",
              "fullTitle": "countBy Test with empty collection, incorrect function",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testCountBy = countBy(emptyCollection, wrong => wrong.nothing);\n//console.log(testCountBy);\nexpect(countBy(emptyCollection, wrong => wrong.nothing)).to.eql({});",
              "err": {},
              "uuid": "d232708d-30c6-4f49-94a3-782b32cb9fdc",
              "parentUUID": "4d065947-4cbd-481d-b31b-32ee93d065d9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f30e9510-a63a-493d-afe1-537337689617",
            "d232708d-30c6-4f49-94a3-782b32cb9fdc"
          ],
          "failures": [
            "1bbdfc1b-d362-477b-83a3-8a30422f89c3",
            "99e2b2bd-7836-484e-a35a-9ca1fb58cdc9"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "434b6d15-f184-4259-b560-92d223a0f428",
          "title": "difference",
          "fullFile": "/Users/opa/testCourse/swTestingCourse2022/test/difference.test.js",
          "file": "/test/difference.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Test with similar arrays",
              "fullTitle": "difference Test with similar arrays",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testDifference = difference(normalArray1, normalArray1);\n//console.log(testDifference);\nexpect(difference(normalArray1, normalArray1)).to.eql([]);",
              "err": {},
              "uuid": "5cd5ec37-efde-40f6-a74b-cfd0f0926307",
              "parentUUID": "434b6d15-f184-4259-b560-92d223a0f428",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with two arrays",
              "fullTitle": "difference Test with two arrays",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testDifference = difference(normalArray1, normalArray2);\n//console.log(testDifference);\nexpect(difference(normalArray1, normalArray2)).to.eql([1,2]);",
              "err": {},
              "uuid": "5044b7de-8cea-43a1-98a1-ef3ba161fb52",
              "parentUUID": "434b6d15-f184-4259-b560-92d223a0f428",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with empty arrays",
              "fullTitle": "difference Test with empty arrays",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testDifference = difference(emptyArray, emptyArray);\n//console.log(testDifference);\nexpect(difference(emptyArray, emptyArray)).to.eql([]);",
              "err": {},
              "uuid": "7e9582fa-4c34-4f0f-95d7-d8a312dbe16f",
              "parentUUID": "434b6d15-f184-4259-b560-92d223a0f428",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with non-arrays",
              "fullTitle": "difference Test with non-arrays",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testDifference = difference(nonArray, nonArray);\n//console.log(testDifference);\nexpect(difference(nonArray, nonArray)).to.eql([]);",
              "err": {},
              "uuid": "d628cc3a-05fa-4339-ae52-b1ab5df93218",
              "parentUUID": "434b6d15-f184-4259-b560-92d223a0f428",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5cd5ec37-efde-40f6-a74b-cfd0f0926307",
            "5044b7de-8cea-43a1-98a1-ef3ba161fb52",
            "7e9582fa-4c34-4f0f-95d7-d8a312dbe16f",
            "d628cc3a-05fa-4339-ae52-b1ab5df93218"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "887e4b89-14de-4439-ae1a-250de600d7c1",
          "title": "drop",
          "fullFile": "/Users/opa/testCourse/swTestingCourse2022/test/drop.test.js",
          "file": "/test/drop.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Test with normal array, positive number",
              "fullTitle": "drop Test with normal array, positive number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testDrop = drop(normalArray, 2);\n//console.log(testDrop);\nexpect(drop(normalArray, 2)).to.eql([3,4]);",
              "err": {},
              "uuid": "856af167-6a4e-4f1d-b5df-adb24f66acbf",
              "parentUUID": "887e4b89-14de-4439-ae1a-250de600d7c1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with normal array, bigger number",
              "fullTitle": "drop Test with normal array, bigger number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testDrop = drop(normalArray, 2);\n//console.log(testDrop);\nexpect(drop(normalArray, 5)).to.eql([]);",
              "err": {},
              "uuid": "eba7e6c1-0030-4c00-944b-65acf5517a5a",
              "parentUUID": "887e4b89-14de-4439-ae1a-250de600d7c1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with normal array, negative number",
              "fullTitle": "drop Test with normal array, negative number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testDrop = drop(normalArray, -2);\n//console.log(testDrop);\nexpect(drop(normalArray, 2)).to.eql([3,4]);",
              "err": {},
              "uuid": "6c24383e-e317-4ce6-8502-24a2182f6c81",
              "parentUUID": "887e4b89-14de-4439-ae1a-250de600d7c1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with empty array, bigger number",
              "fullTitle": "drop Test with empty array, bigger number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testDrop = drop(emptyArray, 2);\n//console.log(testDrop);\nexpect(drop(emptyArray, 5)).to.eql([]);",
              "err": {},
              "uuid": "6dbd6fcd-6efd-424f-8764-d9938bf569ad",
              "parentUUID": "887e4b89-14de-4439-ae1a-250de600d7c1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with non-array, char as number",
              "fullTitle": "drop Test with non-array, char as number",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testDrop = drop(nonArray, 'r');\n//console.log(testDrop);\nexpect(drop(nonArray, 'r')).to.eql(['a','r','r','a','y']);",
              "err": {},
              "uuid": "95bf44c0-a9a4-42ff-b3ee-11946f8c0f66",
              "parentUUID": "887e4b89-14de-4439-ae1a-250de600d7c1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "856af167-6a4e-4f1d-b5df-adb24f66acbf",
            "eba7e6c1-0030-4c00-944b-65acf5517a5a",
            "6c24383e-e317-4ce6-8502-24a2182f6c81",
            "6dbd6fcd-6efd-424f-8764-d9938bf569ad",
            "95bf44c0-a9a4-42ff-b3ee-11946f8c0f66"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c696c808-5bb7-4d00-9a36-34fd2abec022",
          "title": "Filter",
          "fullFile": "/Users/opa/testCourse/swTestingCourse2022/test/filter.test.js",
          "file": "/test/filter.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Test with empty",
              "fullTitle": "Filter Test with empty",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(filter()).to.eql([[]])",
              "err": {},
              "uuid": "5ea606aa-2e2f-4f0a-960d-77b54546b5e0",
              "parentUUID": "c696c808-5bb7-4d00-9a36-34fd2abec022",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with correct function",
              "fullTitle": "Filter Test with correct function",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(filter(users,({active}) => active)).to.eql([ { user: 'barney', active: true } ])",
              "err": {},
              "uuid": "d9a07942-5050-4ee3-be4a-9f6701905bff",
              "parentUUID": "c696c808-5bb7-4d00-9a36-34fd2abec022",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with correct array",
              "fullTitle": "Filter Test with correct array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(filter(users,({ user }) => user)).to.eql([ { user: 'barney', active: true },{\"active\": false, \"user\": \"fred\"} ])",
              "err": {},
              "uuid": "629d2c81-a237-445f-a717-1874eb99015a",
              "parentUUID": "c696c808-5bb7-4d00-9a36-34fd2abec022",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with incorrect function",
              "fullTitle": "Filter Test with incorrect function",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(filter(users,({ user }) => 'barney')).to.eql([ { user: 'barney', active: true } ])",
              "err": {
                "message": "AssertionError: expected [ …(2) ] to deeply equal [ { user: 'barney', active: true } ]",
                "estack": "AssertionError: expected [ …(2) ] to deeply equal [ { user: 'barney', active: true } ]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/filter.test.js:22:53)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": "   {\n     \"active\": true\n     \"user\": \"barney\"\n   }\n-   {\n-     \"active\": false\n-     \"user\": \"fred\"\n-   }\n ]\n"
              },
              "uuid": "9f992017-713f-40b5-9001-d8f367401d6c",
              "parentUUID": "c696c808-5bb7-4d00-9a36-34fd2abec022",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5ea606aa-2e2f-4f0a-960d-77b54546b5e0",
            "d9a07942-5050-4ee3-be4a-9f6701905bff",
            "629d2c81-a237-445f-a717-1874eb99015a"
          ],
          "failures": [
            "9f992017-713f-40b5-9001-d8f367401d6c"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "562056d5-5036-4226-8c2b-d00506ce07e0",
          "title": "isArrayLikeObject",
          "fullFile": "/Users/opa/testCourse/swTestingCourse2022/test/isArrayLikeObject.test.js",
          "file": "/test/isArrayLikeObject.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Test with integer array",
              "fullTitle": "isArrayLikeObject Test with integer array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isArrayLikeObject([1,2,3])).to.equal(true)",
              "err": {},
              "uuid": "86146d67-b8f5-4b2b-b057-b08f2b01ae1f",
              "parentUUID": "562056d5-5036-4226-8c2b-d00506ce07e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with string array",
              "fullTitle": "isArrayLikeObject Test with string array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isArrayLikeObject(['a', 'b', 'c'])).to.equal(true)",
              "err": {},
              "uuid": "0048dae4-74f0-4a45-a57b-fb6bbc6136d0",
              "parentUUID": "562056d5-5036-4226-8c2b-d00506ce07e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with integer",
              "fullTitle": "isArrayLikeObject Test with integer",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isArrayLikeObject(13)).to.equal(false)",
              "err": {},
              "uuid": "4ba6a0ea-c6e3-4bf7-a1fa-989a23713ce7",
              "parentUUID": "562056d5-5036-4226-8c2b-d00506ce07e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with string",
              "fullTitle": "isArrayLikeObject Test with string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isArrayLikeObject('abc')).to.equal(false)",
              "err": {},
              "uuid": "fc46d1fb-5021-47e7-b6f3-47c2b79ac644",
              "parentUUID": "562056d5-5036-4226-8c2b-d00506ce07e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with empty",
              "fullTitle": "isArrayLikeObject Test with empty",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isArrayLikeObject()).to.equal(false)",
              "err": {},
              "uuid": "b56fc0cf-6c11-40dd-ba90-d0aed0041f1d",
              "parentUUID": "562056d5-5036-4226-8c2b-d00506ce07e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with null",
              "fullTitle": "isArrayLikeObject Test with null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isArrayLikeObject(null)).to.equal(false)",
              "err": {},
              "uuid": "05008faa-d97b-4a8d-828f-015f0cd4c674",
              "parentUUID": "562056d5-5036-4226-8c2b-d00506ce07e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with function",
              "fullTitle": "isArrayLikeObject Test with function",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isArrayLikeObject(isArrayLike([1,2,3]))).to.equal(false)",
              "err": {},
              "uuid": "d926c047-d01a-416d-8f5c-d4fbf24eb9c1",
              "parentUUID": "562056d5-5036-4226-8c2b-d00506ce07e0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "86146d67-b8f5-4b2b-b057-b08f2b01ae1f",
            "0048dae4-74f0-4a45-a57b-fb6bbc6136d0",
            "4ba6a0ea-c6e3-4bf7-a1fa-989a23713ce7",
            "fc46d1fb-5021-47e7-b6f3-47c2b79ac644",
            "b56fc0cf-6c11-40dd-ba90-d0aed0041f1d",
            "05008faa-d97b-4a8d-828f-015f0cd4c674",
            "d926c047-d01a-416d-8f5c-d4fbf24eb9c1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5305510b-2161-42ad-add8-3e0191292779",
          "title": "isEmpty",
          "fullFile": "/Users/opa/testCourse/swTestingCourse2022/test/isEmpty.test.js",
          "file": "/test/isEmpty.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Test with null",
              "fullTitle": "isEmpty Test with null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty(null)).to.equal(true)",
              "err": {},
              "uuid": "4d271542-ea77-4e0a-9574-c154f1c03ad7",
              "parentUUID": "5305510b-2161-42ad-add8-3e0191292779",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test empty",
              "fullTitle": "isEmpty Test empty",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty()).to.equal(true)",
              "err": {},
              "uuid": "1f593fa1-2592-412a-91df-a413488d9d0e",
              "parentUUID": "5305510b-2161-42ad-add8-3e0191292779",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with true",
              "fullTitle": "isEmpty Test with true",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty(true)).to.equal(true)",
              "err": {},
              "uuid": "c16738eb-6c58-4aa6-a060-c01429baf79b",
              "parentUUID": "5305510b-2161-42ad-add8-3e0191292779",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with 1",
              "fullTitle": "isEmpty Test with 1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty(1)).to.equal(true)",
              "err": {},
              "uuid": "37085220-a1db-468c-8cf2-9267f26936af",
              "parentUUID": "5305510b-2161-42ad-add8-3e0191292779",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with empty array",
              "fullTitle": "isEmpty Test with empty array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty([])).to.equal(true)",
              "err": {},
              "uuid": "3ac6422e-528e-421a-bf32-4020cd478fc3",
              "parentUUID": "5305510b-2161-42ad-add8-3e0191292779",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with empty string",
              "fullTitle": "isEmpty Test with empty string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty('')).to.equal(true)",
              "err": {},
              "uuid": "6c98a462-75a6-4649-b0fb-c485edce01fb",
              "parentUUID": "5305510b-2161-42ad-add8-3e0191292779",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with string",
              "fullTitle": "isEmpty Test with string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty('abc')).to.equal(false)",
              "err": {},
              "uuid": "72158faa-02a8-4671-8a68-451131e99364",
              "parentUUID": "5305510b-2161-42ad-add8-3e0191292779",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with array",
              "fullTitle": "isEmpty Test with array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty([1,2,3])).to.equal(false)",
              "err": {},
              "uuid": "00681f72-62b9-47f2-8709-1fdb0c7fc448",
              "parentUUID": "5305510b-2161-42ad-add8-3e0191292779",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with object",
              "fullTitle": "isEmpty Test with object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty({ 'a': 1 })).to.equal(false)",
              "err": {},
              "uuid": "7e738854-d779-4666-b527-7b076a004845",
              "parentUUID": "5305510b-2161-42ad-add8-3e0191292779",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with map",
              "fullTitle": "isEmpty Test with map",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty('a', 1)).to.equal(false)",
              "err": {},
              "uuid": "7a5ec4a9-da09-409d-9b90-b084e1571b71",
              "parentUUID": "5305510b-2161-42ad-add8-3e0191292779",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4d271542-ea77-4e0a-9574-c154f1c03ad7",
            "1f593fa1-2592-412a-91df-a413488d9d0e",
            "c16738eb-6c58-4aa6-a060-c01429baf79b",
            "37085220-a1db-468c-8cf2-9267f26936af",
            "3ac6422e-528e-421a-bf32-4020cd478fc3",
            "6c98a462-75a6-4649-b0fb-c485edce01fb",
            "72158faa-02a8-4671-8a68-451131e99364",
            "00681f72-62b9-47f2-8709-1fdb0c7fc448",
            "7e738854-d779-4666-b527-7b076a004845",
            "7a5ec4a9-da09-409d-9b90-b084e1571b71"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "03810aa8-5f63-4c09-a89c-b52600cdc2fd",
          "title": "memoize",
          "fullFile": "/Users/opa/testCourse/swTestingCourse2022/test/memoize.test.js",
          "file": "/test/memoize.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Test with normal objects",
              "fullTitle": "memoize Test with normal objects",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const memoizeFunc = memoize(vals);\nvar result1 = memoizeFunc(object);\nvar result2 = memoizeFunc(other);\nexpect(result1).to.eql([1,2]);\nexpect(result2).to.eql([3,4]);",
              "err": {},
              "uuid": "73cb0a72-dd8a-4bbd-b338-0d01180f0098",
              "parentUUID": "03810aa8-5f63-4c09-a89c-b52600cdc2fd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with wrong type (no function)",
              "fullTitle": "memoize Test with wrong type (no function)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(()=> {(memoize(\"Memoize\"))}).to.throw('Expected a function');\nexpect(()=> {(memoize(1))}).to.throw('Expected a function');\nexpect(()=> {(memoize(undefined))}).to.throw('Expected a function');",
              "err": {},
              "uuid": "09aeebc3-2a55-4491-a922-51d1078b358f",
              "parentUUID": "03810aa8-5f63-4c09-a89c-b52600cdc2fd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test cache-setting",
              "fullTitle": "memoize Test cache-setting",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const memoizeFunc = memoize(vals);\nvar result1 = memoizeFunc(object);\nvar result2 = memoizeFunc(other);\nexpect(result1).to.eql([1,2]);\nexpect(result2).to.eql([3,4]);\nmemoizeFunc.cache.set(object, ['a', 'b'])\nmemoizeFunc.cache.set(other, ['c', 'd'])\nexpect(memoizeFunc(object)).to.eql(['a','b']);\nexpect(memoizeFunc(other)).to.eql(['c','d']);",
              "err": {},
              "uuid": "39732b8a-5691-49e9-b229-6b9db1ddbd4c",
              "parentUUID": "03810aa8-5f63-4c09-a89c-b52600cdc2fd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test output to remain when modifying object",
              "fullTitle": "memoize Test output to remain when modifying object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var anotherObj = {\"a\" : 5, \"b\" : 10};\nconst memoizeFunc = memoize(vals);\nconst referMemo = memoizeFunc(anotherObj);\nanotherObj.a = 10;\nconst result1 = memoizeFunc(anotherObj);\nexpect(result1).to.eql(referMemo);\nexpect(anotherObj).to.eql({\"a\" : 10, \"b\" : 10})",
              "err": {},
              "uuid": "67f2e893-4a59-44f8-af8b-4d1b65e1257a",
              "parentUUID": "03810aa8-5f63-4c09-a89c-b52600cdc2fd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "73cb0a72-dd8a-4bbd-b338-0d01180f0098",
            "09aeebc3-2a55-4491-a922-51d1078b358f",
            "39732b8a-5691-49e9-b229-6b9db1ddbd4c",
            "67f2e893-4a59-44f8-af8b-4d1b65e1257a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}