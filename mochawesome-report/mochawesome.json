{
  "stats": {
    "suites": 10,
    "tests": 70,
    "passes": 50,
    "pending": 0,
    "failures": 20,
    "start": "2022-12-15T12:32:36.319Z",
    "end": "2022-12-15T12:32:36.336Z",
    "duration": 17,
    "testsRegistered": 70,
    "passPercent": 71.42857142857143,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "90994699-a4fc-423c-a4f5-e367051c4a2e",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e2d007e4-c797-43b7-9b92-06c0176abd8d",
          "title": "Add",
          "fullFile": "/Users/opa/testCourse/swTestingCourse2022/test/add.test.js",
          "file": "/test/add.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adds zero to positive number",
              "fullTitle": "Add Adds zero to positive number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(0,3)).to.equal(3)",
              "err": {},
              "uuid": "845a1c5c-9701-4bea-9bb1-77109d7d4057",
              "parentUUID": "e2d007e4-c797-43b7-9b92-06c0176abd8d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds positive number to zero",
              "fullTitle": "Add Adds positive number to zero",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(3,0)).to.equal(3)",
              "err": {},
              "uuid": "f3534a40-49e7-43c1-b527-dab767599545",
              "parentUUID": "e2d007e4-c797-43b7-9b92-06c0176abd8d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds zero to negative number",
              "fullTitle": "Add Adds zero to negative number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(0,-3)).to.equal(-3)",
              "err": {},
              "uuid": "0edc9e49-a598-46e5-a5bd-beebc80e629b",
              "parentUUID": "e2d007e4-c797-43b7-9b92-06c0176abd8d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds negative number to zero",
              "fullTitle": "Add Adds negative number to zero",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(-3,0)).to.equal(-3)",
              "err": {},
              "uuid": "096057a3-cc5a-4ea0-8ab3-53879130b58f",
              "parentUUID": "e2d007e4-c797-43b7-9b92-06c0176abd8d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds positive number to positive number",
              "fullTitle": "Add Adds positive number to positive number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(3,6)).to.equal(9)",
              "err": {},
              "uuid": "3c07145e-6d10-4c1c-b075-932a7f15e215",
              "parentUUID": "e2d007e4-c797-43b7-9b92-06c0176abd8d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds negative number to negative number",
              "fullTitle": "Add Adds negative number to negative number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(-3,-6)).to.equal(-9)",
              "err": {},
              "uuid": "24b7704e-6b88-4b76-a8d0-3a9afbcb8352",
              "parentUUID": "e2d007e4-c797-43b7-9b92-06c0176abd8d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds string to positive number",
              "fullTitle": "Add Adds string to positive number",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(add(\"abc\",6)).to.equal(RangeError)",
              "err": {
                "message": "AssertionError: expected 'abc6' to equal [Function RangeError]",
                "estack": "AssertionError: expected 'abc6' to equal [Function RangeError]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/add.test.js:27:29)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "7eb80ed3-2adb-489b-bc46-c1a60ba8a154",
              "parentUUID": "e2d007e4-c797-43b7-9b92-06c0176abd8d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds null to positive number",
              "fullTitle": "Add Adds null to positive number",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(add(null,6)).to.equal(RangeError)",
              "err": {
                "message": "AssertionError: expected 6 to equal [Function RangeError]",
                "estack": "AssertionError: expected 6 to equal [Function RangeError]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/add.test.js:30:28)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "cfeab7a2-4a3b-4266-bcb0-af5c27ad08e7",
              "parentUUID": "e2d007e4-c797-43b7-9b92-06c0176abd8d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds boolean to positive number",
              "fullTitle": "Add Adds boolean to positive number",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(add(true,6)).to.equal(RangeError)",
              "err": {
                "message": "AssertionError: expected 7 to equal [Function RangeError]",
                "estack": "AssertionError: expected 7 to equal [Function RangeError]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/add.test.js:33:28)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "c4e242bc-6506-4304-989b-66d4182ef4e4",
              "parentUUID": "e2d007e4-c797-43b7-9b92-06c0176abd8d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds positive decimal number to positive decimal number",
              "fullTitle": "Add Adds positive decimal number to positive decimal number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(1.25,2.25)).to.equal(3.5)",
              "err": {},
              "uuid": "71505806-1227-4fda-a535-e019d36db48c",
              "parentUUID": "e2d007e4-c797-43b7-9b92-06c0176abd8d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds positive decimal number to negative decimal number",
              "fullTitle": "Add Adds positive decimal number to negative decimal number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(1.5,-2.25)).to.equal(-0.75)",
              "err": {},
              "uuid": "ddb786ca-ea91-4566-8f10-310a11ef7b97",
              "parentUUID": "e2d007e4-c797-43b7-9b92-06c0176abd8d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds negative decimal number to negative decimal number",
              "fullTitle": "Add Adds negative decimal number to negative decimal number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(-1.5,-2)).to.equal(-3.5)",
              "err": {},
              "uuid": "81f7d31b-ef18-444e-b8b3-caef91562ac8",
              "parentUUID": "e2d007e4-c797-43b7-9b92-06c0176abd8d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "845a1c5c-9701-4bea-9bb1-77109d7d4057",
            "f3534a40-49e7-43c1-b527-dab767599545",
            "0edc9e49-a598-46e5-a5bd-beebc80e629b",
            "096057a3-cc5a-4ea0-8ab3-53879130b58f",
            "3c07145e-6d10-4c1c-b075-932a7f15e215",
            "24b7704e-6b88-4b76-a8d0-3a9afbcb8352",
            "71505806-1227-4fda-a535-e019d36db48c",
            "ddb786ca-ea91-4566-8f10-310a11ef7b97",
            "81f7d31b-ef18-444e-b8b3-caef91562ac8"
          ],
          "failures": [
            "7eb80ed3-2adb-489b-bc46-c1a60ba8a154",
            "cfeab7a2-4a3b-4266-bcb0-af5c27ad08e7",
            "c4e242bc-6506-4304-989b-66d4182ef4e4"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "dd2e7002-e303-4927-9f03-6f4e9efda5c1",
          "title": "Capitalize",
          "fullFile": "/Users/opa/testCourse/swTestingCourse2022/test/capitalize.test.js",
          "file": "/test/capitalize.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Test all lowercase in a string",
              "fullTitle": "Capitalize Test all lowercase in a string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(\"hello\")).to.equal(\"Hello\")",
              "err": {},
              "uuid": "b4b4990a-3e6c-4f33-985b-35eee72dbf6e",
              "parentUUID": "dd2e7002-e303-4927-9f03-6f4e9efda5c1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test all uppercase in a string",
              "fullTitle": "Capitalize Test all uppercase in a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(\"HELLO\")).to.equal(\"Hello\")",
              "err": {},
              "uuid": "5db23e2c-4a93-4885-8226-3e8e9755622a",
              "parentUUID": "dd2e7002-e303-4927-9f03-6f4e9efda5c1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test camelCase",
              "fullTitle": "Capitalize Test camelCase",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(\"helloWorld\")).to.equal(\"Helloworld\")",
              "err": {},
              "uuid": "3b68872c-da19-49ff-a612-496b2123fc77",
              "parentUUID": "dd2e7002-e303-4927-9f03-6f4e9efda5c1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test empty string",
              "fullTitle": "Capitalize Test empty string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(\"\")).to.equal(\"\")",
              "err": {},
              "uuid": "6d25a206-5562-485a-9b33-5a5d738fd494",
              "parentUUID": "dd2e7002-e303-4927-9f03-6f4e9efda5c1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test one char lowercase",
              "fullTitle": "Capitalize Test one char lowercase",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(\"a\")).to.equal(\"A\")",
              "err": {},
              "uuid": "d1de8aae-09bc-499e-b06c-39eb2f94bdda",
              "parentUUID": "dd2e7002-e303-4927-9f03-6f4e9efda5c1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test one char uppercase",
              "fullTitle": "Capitalize Test one char uppercase",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(\"B\")).to.equal(\"B\")",
              "err": {},
              "uuid": "2f70cd7c-af2d-4a6c-9a26-838fe5a15cac",
              "parentUUID": "dd2e7002-e303-4927-9f03-6f4e9efda5c1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test integer",
              "fullTitle": "Capitalize Test integer",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(1)).to.equal(RangeError)",
              "err": {
                "message": "AssertionError: expected '1' to equal [Function RangeError]",
                "estack": "AssertionError: expected '1' to equal [Function RangeError]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/capitalize.test.js:27:34)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "eca7aff1-0dd8-4e7e-85e6-2fcd8a2777b4",
              "parentUUID": "dd2e7002-e303-4927-9f03-6f4e9efda5c1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test float",
              "fullTitle": "Capitalize Test float",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(1.1)).to.equal(RangeError)",
              "err": {
                "message": "AssertionError: expected '1.1' to equal [Function RangeError]",
                "estack": "AssertionError: expected '1.1' to equal [Function RangeError]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/capitalize.test.js:30:36)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "c948e8ea-9055-402b-8567-51d8e5d2a8bc",
              "parentUUID": "dd2e7002-e303-4927-9f03-6f4e9efda5c1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test boolean",
              "fullTitle": "Capitalize Test boolean",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(true)).to.equal(RangeError)",
              "err": {
                "message": "AssertionError: expected 'True' to equal [Function RangeError]",
                "estack": "AssertionError: expected 'True' to equal [Function RangeError]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/capitalize.test.js:33:37)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "522c58af-ed6a-47d7-88b5-453dafc380bb",
              "parentUUID": "dd2e7002-e303-4927-9f03-6f4e9efda5c1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b4b4990a-3e6c-4f33-985b-35eee72dbf6e",
            "5db23e2c-4a93-4885-8226-3e8e9755622a",
            "3b68872c-da19-49ff-a612-496b2123fc77",
            "6d25a206-5562-485a-9b33-5a5d738fd494",
            "d1de8aae-09bc-499e-b06c-39eb2f94bdda",
            "2f70cd7c-af2d-4a6c-9a26-838fe5a15cac"
          ],
          "failures": [
            "eca7aff1-0dd8-4e7e-85e6-2fcd8a2777b4",
            "c948e8ea-9055-402b-8567-51d8e5d2a8bc",
            "522c58af-ed6a-47d7-88b5-453dafc380bb"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d77cdee8-c0aa-4cd0-9296-f3d75ff79191",
          "title": "Chunk",
          "fullFile": "/Users/opa/testCourse/swTestingCourse2022/test/chunk.test.js",
          "file": "/test/chunk.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Test with normal array, positive length",
              "fullTitle": "Chunk Test with normal array, positive length",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var testChunk = chunk(normalArray, 2);\n//console.log(testChunk);\nexpect(chunk(normalArray, 2)).to.equal([['a', 'b'], ['c', 'd']]);",
              "err": {
                "message": "AssertionError: expected [ [ 'c', 'd' ], undefined ] to equal [ [ 'a', 'b' ], [ 'c', 'd' ] ]",
                "estack": "AssertionError: expected [ [ 'c', 'd' ], undefined ] to equal [ [ 'a', 'b' ], [ 'c', 'd' ] ]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/chunk.test.js:13:38)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": " [\n   [\n+     \"a\"\n+     \"b\"\n+   ]\n+   [\n     \"c\"\n     \"d\"\n   ]\n ]\n"
              },
              "uuid": "3a935460-161c-42cf-bb68-c830ffbd6239",
              "parentUUID": "d77cdee8-c0aa-4cd0-9296-f3d75ff79191",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with normal array, longer length",
              "fullTitle": "Chunk Test with normal array, longer length",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var testChunk = chunk(normalArray, 5);\n//console.log(testChunk);\nexpect(chunk(normalArray, 2)).to.equal([['a'],['b'],['c'],['d']]);",
              "err": {
                "message": "AssertionError: expected [ [ 'c', 'd' ], undefined ] to equal [ [ 'a' ], [ 'b' ], [ 'c' ], [ 'd' ] ]",
                "estack": "AssertionError: expected [ [ 'c', 'd' ], undefined ] to equal [ [ 'a' ], [ 'b' ], [ 'c' ], [ 'd' ] ]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/chunk.test.js:18:38)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": " [\n   [\n+     \"a\"\n+   ]\n+   [\n+     \"b\"\n+   ]\n+   [\n     \"c\"\n+   ]\n+   [\n     \"d\"\n   ]\n ]\n"
              },
              "uuid": "e942a334-370d-4669-b922-3a98db0070c6",
              "parentUUID": "d77cdee8-c0aa-4cd0-9296-f3d75ff79191",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with odd array, positive length",
              "fullTitle": "Chunk Test with odd array, positive length",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var testChunk = chunk(oddArray, 4);\n//console.log(testChunk);\nexpect(chunk(oddArray, 4)).to.equal([['a'],['b'],['c'],['d', 'e']]);",
              "err": {
                "message": "AssertionError: expected [ [ 'e', undefined, …(2) ], undefined ] to equal [ [ 'a' ], [ 'b' ], [ 'c' ], …(1) ]",
                "estack": "AssertionError: expected [ [ 'e', undefined, …(2) ], undefined ] to equal [ [ 'a' ], [ 'b' ], [ 'c' ], …(1) ]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/chunk.test.js:23:35)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": " [\n   [\n+     \"a\"\n+   ]\n+   [\n+     \"b\"\n+   ]\n+   [\n+     \"c\"\n+   ]\n+   [\n+     \"d\"\n     \"e\"\n-     [undefined]\n-     [undefined]\n-     [undefined]\n   ]\n ]\n"
              },
              "uuid": "29df0969-b73a-48b4-8867-6abfaf894aa0",
              "parentUUID": "d77cdee8-c0aa-4cd0-9296-f3d75ff79191",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with empty array, positive length",
              "fullTitle": "Chunk Test with empty array, positive length",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testChunk = chunk(emptyArray, 2);\n//console.log(testChunk);\nexpect(chunk(emptyArray, 2)).to.eql([]);",
              "err": {},
              "uuid": "c4c7c96b-66cd-4f0c-9d7d-81b90579b59b",
              "parentUUID": "d77cdee8-c0aa-4cd0-9296-f3d75ff79191",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with normal array, no length",
              "fullTitle": "Chunk Test with normal array, no length",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var testChunk = chunk(normalArray);\n//console.log(testChunk);\nexpect(chunk(normalArray)).to.equal([['a'],['b'],['c'],['d']]);",
              "err": {
                "message": "AssertionError: expected [ [ 'd' ], undefined, undefined, …(1) ] to equal [ [ 'a' ], [ 'b' ], [ 'c' ], [ 'd' ] ]",
                "estack": "AssertionError: expected [ [ 'd' ], undefined, undefined, …(1) ] to equal [ [ 'a' ], [ 'b' ], [ 'c' ], [ 'd' ] ]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/chunk.test.js:33:35)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": " [\n   [\n+     \"a\"\n+   ]\n+   [\n+     \"b\"\n+   ]\n+   [\n+     \"c\"\n+   ]\n+   [\n     \"d\"\n   ]\n ]\n"
              },
              "uuid": "056317ff-a2b6-4d3c-a8e3-e6dafbfb71aa",
              "parentUUID": "d77cdee8-c0aa-4cd0-9296-f3d75ff79191",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with empty array, no length",
              "fullTitle": "Chunk Test with empty array, no length",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var testChunk = chunk(normalArray);\n//console.log(testChunk);\nexpect(chunk(normalArray)).to.eql([]);",
              "err": {
                "message": "AssertionError: expected [ [ 'd' ], undefined, undefined, …(1) ] to deeply equal []",
                "estack": "AssertionError: expected [ [ 'd' ], undefined, undefined, …(1) ] to deeply equal []\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/chunk.test.js:38:35)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": "- [\n-   [\n-     \"d\"\n-   ]\n- ]\n+ []\n"
              },
              "uuid": "7d1cc913-80a8-4814-9cc1-22dee6ae3319",
              "parentUUID": "d77cdee8-c0aa-4cd0-9296-f3d75ff79191",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with normal array, negative length",
              "fullTitle": "Chunk Test with normal array, negative length",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var testChunk = chunk(normalArray);\n//console.log(testChunk);\nexpect(chunk(normalArray)).to.equal([['a','b'],['c','d']]);",
              "err": {
                "message": "AssertionError: expected [ [ 'd' ], undefined, undefined, …(1) ] to equal [ [ 'a', 'b' ], [ 'c', 'd' ] ]",
                "estack": "AssertionError: expected [ [ 'd' ], undefined, undefined, …(1) ] to equal [ [ 'a', 'b' ], [ 'c', 'd' ] ]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/chunk.test.js:43:35)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": " [\n   [\n+     \"a\"\n+     \"b\"\n+   ]\n+   [\n+     \"c\"\n     \"d\"\n   ]\n ]\n"
              },
              "uuid": "0888d521-d369-40be-8f67-9626ea4605e7",
              "parentUUID": "d77cdee8-c0aa-4cd0-9296-f3d75ff79191",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with empty array, negative length",
              "fullTitle": "Chunk Test with empty array, negative length",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testChunk = chunk(normalArray, -2);\n//console.log(testChunk);\nexpect(chunk(normalArray, -2)).to.eql([]);",
              "err": {},
              "uuid": "41b38db9-5791-4cec-be32-44dafb39b7e8",
              "parentUUID": "d77cdee8-c0aa-4cd0-9296-f3d75ff79191",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with normal array, length as string",
              "fullTitle": "Chunk Test with normal array, length as string",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var testChunk = chunk(normalArray, '1');\n//console.log(testChunk);\nexpect(chunk(normalArray, '1')).to.equal([['a'],['b'],['c'],['d']]);",
              "err": {
                "message": "AssertionError: expected [ [ 'd' ], undefined, undefined, …(1) ] to equal [ [ 'a' ], [ 'b' ], [ 'c' ], [ 'd' ] ]",
                "estack": "AssertionError: expected [ [ 'd' ], undefined, undefined, …(1) ] to equal [ [ 'a' ], [ 'b' ], [ 'c' ], [ 'd' ] ]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/chunk.test.js:53:40)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": " [\n   [\n+     \"a\"\n+   ]\n+   [\n+     \"b\"\n+   ]\n+   [\n+     \"c\"\n+   ]\n+   [\n     \"d\"\n   ]\n ]\n"
              },
              "uuid": "ab77c188-1b80-40e0-9d05-eb1decc67469",
              "parentUUID": "d77cdee8-c0aa-4cd0-9296-f3d75ff79191",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with normal array, length as alphaChar",
              "fullTitle": "Chunk Test with normal array, length as alphaChar",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testChunk = chunk(normalArray, 'a');\n//console.log(testChunk);\nexpect(chunk(normalArray, 'a')).to.eql([]);",
              "err": {},
              "uuid": "513f039e-f8ca-4fc6-8761-48dd855c9a27",
              "parentUUID": "d77cdee8-c0aa-4cd0-9296-f3d75ff79191",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c4c7c96b-66cd-4f0c-9d7d-81b90579b59b",
            "41b38db9-5791-4cec-be32-44dafb39b7e8",
            "513f039e-f8ca-4fc6-8761-48dd855c9a27"
          ],
          "failures": [
            "3a935460-161c-42cf-bb68-c830ffbd6239",
            "e942a334-370d-4669-b922-3a98db0070c6",
            "29df0969-b73a-48b4-8867-6abfaf894aa0",
            "056317ff-a2b6-4d3c-a8e3-e6dafbfb71aa",
            "7d1cc913-80a8-4814-9cc1-22dee6ae3319",
            "0888d521-d369-40be-8f67-9626ea4605e7",
            "ab77c188-1b80-40e0-9d05-eb1decc67469"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "14c03919-b2a5-4676-ba75-42e3f363ecc7",
          "title": "countBy",
          "fullFile": "/Users/opa/testCourse/swTestingCourse2022/test/countBy.test.js",
          "file": "/test/countBy.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Test with normal collection, working function",
              "fullTitle": "countBy Test with normal collection, working function",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var testCountBy = countBy(normalCollection, value => value.active);\n//console.log(testCountBy);\nexpect(countBy(normalCollection, value => value.active)).to.equal({'true': 2, 'false': 1});",
              "err": {
                "message": "AssertionError: expected { true: 1, false: +0 } to equal { true: 2, false: 1 }",
                "estack": "AssertionError: expected { true: 1, false: +0 } to equal { true: 2, false: 1 }\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/countBy.test.js:16:65)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": " {\n-   \"false\": 0\n-   \"true\": 1\n+   \"false\": 1\n+   \"true\": 2\n }\n"
              },
              "uuid": "942aa2dc-efa2-464c-b618-7431e11fe6e5",
              "parentUUID": "14c03919-b2a5-4676-ba75-42e3f363ecc7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with normal collection, incorrect function",
              "fullTitle": "countBy Test with normal collection, incorrect function",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var testCountBy = countBy(normalCollection, wrong => wrong.nothing);\n//console.log(testCountBy);\nexpect(countBy(normalCollection, wrong => wrong.nothing)).to.eql({});",
              "err": {
                "message": "AssertionError: expected { undefined: 2 } to deeply equal {}",
                "estack": "AssertionError: expected { undefined: 2 } to deeply equal {}\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/countBy.test.js:21:66)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": "- {\n-   \"undefined\": 2\n- }\n+ {}\n"
              },
              "uuid": "c69f5df5-6b8a-425a-ac70-4119317da070",
              "parentUUID": "14c03919-b2a5-4676-ba75-42e3f363ecc7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with empty collection, working function",
              "fullTitle": "countBy Test with empty collection, working function",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testCountBy = countBy(emptyCollection, value => value.active);\n//console.log(testCountBy);\nexpect(countBy(emptyCollection, value => value.active)).to.eql({});",
              "err": {},
              "uuid": "5c56e073-a1dc-4d9d-a57f-09df1436cce1",
              "parentUUID": "14c03919-b2a5-4676-ba75-42e3f363ecc7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with empty collection, incorrect function",
              "fullTitle": "countBy Test with empty collection, incorrect function",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testCountBy = countBy(emptyCollection, wrong => wrong.nothing);\n//console.log(testCountBy);\nexpect(countBy(emptyCollection, wrong => wrong.nothing)).to.eql({});",
              "err": {},
              "uuid": "89061e2b-1baa-480a-b27a-b98824dcc621",
              "parentUUID": "14c03919-b2a5-4676-ba75-42e3f363ecc7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5c56e073-a1dc-4d9d-a57f-09df1436cce1",
            "89061e2b-1baa-480a-b27a-b98824dcc621"
          ],
          "failures": [
            "942aa2dc-efa2-464c-b618-7431e11fe6e5",
            "c69f5df5-6b8a-425a-ac70-4119317da070"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7711d11f-a9cb-4e24-9797-924663155232",
          "title": "difference",
          "fullFile": "/Users/opa/testCourse/swTestingCourse2022/test/difference.test.js",
          "file": "/test/difference.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Test with similar arrays",
              "fullTitle": "difference Test with similar arrays",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testDifference = difference(normalArray1, normalArray1);\n//console.log(testDifference);\nexpect(difference(normalArray1, normalArray1)).to.eql([]);",
              "err": {},
              "uuid": "b36df581-d790-4d3d-9877-1bc07ff07863",
              "parentUUID": "7711d11f-a9cb-4e24-9797-924663155232",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with two arrays",
              "fullTitle": "difference Test with two arrays",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testDifference = difference(normalArray1, normalArray2);\n//console.log(testDifference);\nexpect(difference(normalArray1, normalArray2)).to.eql([1,2]);",
              "err": {},
              "uuid": "ab144af1-e920-4d30-a714-2cf1e29528a2",
              "parentUUID": "7711d11f-a9cb-4e24-9797-924663155232",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with empty arrays",
              "fullTitle": "difference Test with empty arrays",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testDifference = difference(emptyArray, emptyArray);\n//console.log(testDifference);\nexpect(difference(emptyArray, emptyArray)).to.eql([]);",
              "err": {},
              "uuid": "156bce8c-dc33-44b7-ba20-80393ddecdd9",
              "parentUUID": "7711d11f-a9cb-4e24-9797-924663155232",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with non-arrays",
              "fullTitle": "difference Test with non-arrays",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testDifference = difference(nonArray, nonArray);\n//console.log(testDifference);\nexpect(difference(nonArray, nonArray)).to.eql([]);",
              "err": {},
              "uuid": "b316c045-d48d-4207-b882-5bf7dfa8df3e",
              "parentUUID": "7711d11f-a9cb-4e24-9797-924663155232",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b36df581-d790-4d3d-9877-1bc07ff07863",
            "ab144af1-e920-4d30-a714-2cf1e29528a2",
            "156bce8c-dc33-44b7-ba20-80393ddecdd9",
            "b316c045-d48d-4207-b882-5bf7dfa8df3e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "15c238f0-eb96-4741-b449-c4ecd7f7e860",
          "title": "drop",
          "fullFile": "/Users/opa/testCourse/swTestingCourse2022/test/drop.test.js",
          "file": "/test/drop.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Test with normal array, positive number",
              "fullTitle": "drop Test with normal array, positive number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testDrop = drop(normalArray, 2);\n//console.log(testDrop);\nexpect(drop(normalArray, 2)).to.eql([3,4]);",
              "err": {},
              "uuid": "dd7b7a1c-ba22-4a2d-90fe-687b9bdbf11c",
              "parentUUID": "15c238f0-eb96-4741-b449-c4ecd7f7e860",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with normal array, bigger number",
              "fullTitle": "drop Test with normal array, bigger number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testDrop = drop(normalArray, 2);\n//console.log(testDrop);\nexpect(drop(normalArray, 5)).to.eql([]);",
              "err": {},
              "uuid": "d4c5e6fe-337c-47d7-850c-cbe910eccd39",
              "parentUUID": "15c238f0-eb96-4741-b449-c4ecd7f7e860",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with normal array, negative number",
              "fullTitle": "drop Test with normal array, negative number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testDrop = drop(normalArray, -2);\n//console.log(testDrop);\nexpect(drop(normalArray, 2)).to.eql([3,4]);",
              "err": {},
              "uuid": "617b5a50-9377-41a9-b9e7-1fd66ed0a898",
              "parentUUID": "15c238f0-eb96-4741-b449-c4ecd7f7e860",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with empty array, bigger number",
              "fullTitle": "drop Test with empty array, bigger number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testDrop = drop(emptyArray, 2);\n//console.log(testDrop);\nexpect(drop(emptyArray, 5)).to.eql([]);",
              "err": {},
              "uuid": "9b372cea-ee31-44ee-a479-1a37b8cd2982",
              "parentUUID": "15c238f0-eb96-4741-b449-c4ecd7f7e860",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with non-array, char as number",
              "fullTitle": "drop Test with non-array, char as number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testDrop = drop(nonArray, 'r');\n//console.log(testDrop);\nexpect(drop(nonArray, 'r')).to.eql(['a','r','r','a','y']);",
              "err": {},
              "uuid": "e34259ab-36d2-4c3f-b7ce-50b1d269270e",
              "parentUUID": "15c238f0-eb96-4741-b449-c4ecd7f7e860",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dd7b7a1c-ba22-4a2d-90fe-687b9bdbf11c",
            "d4c5e6fe-337c-47d7-850c-cbe910eccd39",
            "617b5a50-9377-41a9-b9e7-1fd66ed0a898",
            "9b372cea-ee31-44ee-a479-1a37b8cd2982",
            "e34259ab-36d2-4c3f-b7ce-50b1d269270e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b81a6054-76a5-4c80-b390-e3df58d42749",
          "title": "Filter",
          "fullFile": "/Users/opa/testCourse/swTestingCourse2022/test/filter.test.js",
          "file": "/test/filter.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Test with empty",
              "fullTitle": "Filter Test with empty",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(filter()).to.equal([[]])",
              "err": {
                "message": "AssertionError: expected [ [] ] to equal [ [] ]",
                "estack": "AssertionError: expected [ [] ] to equal [ [] ]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/filter.test.js:13:26)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": ""
              },
              "uuid": "63c37a9e-201f-403b-a60e-9baaa9d31c0a",
              "parentUUID": "b81a6054-76a5-4c80-b390-e3df58d42749",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with correct function",
              "fullTitle": "Filter Test with correct function",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(filter(users,({active}) => active)).to.equal([ { user: 'barney', active: true } ])",
              "err": {
                "message": "AssertionError: expected [ { user: 'barney', active: true } ] to equal [ { user: 'barney', active: true } ]",
                "estack": "AssertionError: expected [ { user: 'barney', active: true } ] to equal [ { user: 'barney', active: true } ]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/filter.test.js:16:52)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": ""
              },
              "uuid": "77788dc5-19c2-48c3-8b08-ad113bc24d99",
              "parentUUID": "b81a6054-76a5-4c80-b390-e3df58d42749",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with correct array",
              "fullTitle": "Filter Test with correct array",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(filter(users,({ user }) => user)).to.equal([ { user: 'barney', active: true },{\"active\": false, \"user\": \"fred\"} ])",
              "err": {
                "message": "AssertionError: expected [ …(2) ] to equal [ …(2) ]",
                "estack": "AssertionError: expected [ …(2) ] to equal [ …(2) ]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/filter.test.js:19:49)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": ""
              },
              "uuid": "2a58c939-ca27-4d36-b7df-f819e1da49fd",
              "parentUUID": "b81a6054-76a5-4c80-b390-e3df58d42749",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with incorrect function",
              "fullTitle": "Filter Test with incorrect function",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(filter(users,({ user }) => 'barney')).to.equal([ { user: 'barney', active: true } ])",
              "err": {
                "message": "AssertionError: expected [ …(2) ] to equal [ { user: 'barney', active: true } ]",
                "estack": "AssertionError: expected [ …(2) ] to equal [ { user: 'barney', active: true } ]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/filter.test.js:22:53)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": "   {\n     \"active\": true\n     \"user\": \"barney\"\n   }\n-   {\n-     \"active\": false\n-     \"user\": \"fred\"\n-   }\n ]\n"
              },
              "uuid": "b9b3359c-79a0-4465-884a-9cd4ef44db2d",
              "parentUUID": "b81a6054-76a5-4c80-b390-e3df58d42749",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "63c37a9e-201f-403b-a60e-9baaa9d31c0a",
            "77788dc5-19c2-48c3-8b08-ad113bc24d99",
            "2a58c939-ca27-4d36-b7df-f819e1da49fd",
            "b9b3359c-79a0-4465-884a-9cd4ef44db2d"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9c94e0f4-cbe7-47d1-9797-464d1becf666",
          "title": "isArrayLikeObject",
          "fullFile": "/Users/opa/testCourse/swTestingCourse2022/test/isArrayLikeObject.test.js",
          "file": "/test/isArrayLikeObject.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Test with integer array",
              "fullTitle": "isArrayLikeObject Test with integer array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isArrayLikeObject([1,2,3])).to.equal(true)",
              "err": {},
              "uuid": "7d3c3d5d-4395-4614-8bd5-743ed518e4c8",
              "parentUUID": "9c94e0f4-cbe7-47d1-9797-464d1becf666",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with string array",
              "fullTitle": "isArrayLikeObject Test with string array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isArrayLikeObject(['a', 'b', 'c'])).to.equal(true)",
              "err": {},
              "uuid": "da9b0b75-2a2d-44e4-88eb-8d6aade53786",
              "parentUUID": "9c94e0f4-cbe7-47d1-9797-464d1becf666",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with integer",
              "fullTitle": "isArrayLikeObject Test with integer",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isArrayLikeObject(13)).to.equal(false)",
              "err": {},
              "uuid": "584bb146-7305-42d9-a79c-f9e027a121e4",
              "parentUUID": "9c94e0f4-cbe7-47d1-9797-464d1becf666",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with string",
              "fullTitle": "isArrayLikeObject Test with string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isArrayLikeObject('abc')).to.equal(false)",
              "err": {},
              "uuid": "0e1d137c-4e78-4ac4-89a6-ada4a7fba192",
              "parentUUID": "9c94e0f4-cbe7-47d1-9797-464d1becf666",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with empty",
              "fullTitle": "isArrayLikeObject Test with empty",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isArrayLikeObject()).to.equal(false)",
              "err": {},
              "uuid": "276247de-5004-4680-84d8-d55d0fb3a0f0",
              "parentUUID": "9c94e0f4-cbe7-47d1-9797-464d1becf666",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with null",
              "fullTitle": "isArrayLikeObject Test with null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isArrayLikeObject(null)).to.equal(false)",
              "err": {},
              "uuid": "73bf8061-b806-428d-b108-28a015289bfd",
              "parentUUID": "9c94e0f4-cbe7-47d1-9797-464d1becf666",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with function",
              "fullTitle": "isArrayLikeObject Test with function",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isArrayLikeObject(isArrayLike([1,2,3]))).to.equal(false)",
              "err": {},
              "uuid": "608ab175-78ba-4564-9e35-ee4ba5faf895",
              "parentUUID": "9c94e0f4-cbe7-47d1-9797-464d1becf666",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7d3c3d5d-4395-4614-8bd5-743ed518e4c8",
            "da9b0b75-2a2d-44e4-88eb-8d6aade53786",
            "584bb146-7305-42d9-a79c-f9e027a121e4",
            "0e1d137c-4e78-4ac4-89a6-ada4a7fba192",
            "276247de-5004-4680-84d8-d55d0fb3a0f0",
            "73bf8061-b806-428d-b108-28a015289bfd",
            "608ab175-78ba-4564-9e35-ee4ba5faf895"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d1796a26-eb8a-4c73-85a1-04111ae07730",
          "title": "isEmpty",
          "fullFile": "/Users/opa/testCourse/swTestingCourse2022/test/isEmpty.test.js",
          "file": "/test/isEmpty.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Test with null",
              "fullTitle": "isEmpty Test with null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty(null)).to.equal(true)",
              "err": {},
              "uuid": "03f10965-5de7-47c8-a985-aff8d5851007",
              "parentUUID": "d1796a26-eb8a-4c73-85a1-04111ae07730",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test empty",
              "fullTitle": "isEmpty Test empty",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty()).to.equal(true)",
              "err": {},
              "uuid": "a9fabad6-8029-4659-9504-4f5453632e9f",
              "parentUUID": "d1796a26-eb8a-4c73-85a1-04111ae07730",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with true",
              "fullTitle": "isEmpty Test with true",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty(true)).to.equal(true)",
              "err": {},
              "uuid": "6ba8027e-62e1-4fb3-bdf5-ff90806f0ce7",
              "parentUUID": "d1796a26-eb8a-4c73-85a1-04111ae07730",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with 1",
              "fullTitle": "isEmpty Test with 1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty(1)).to.equal(true)",
              "err": {},
              "uuid": "e004f0e1-c476-4ff3-a7ad-0c83be94a1a5",
              "parentUUID": "d1796a26-eb8a-4c73-85a1-04111ae07730",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with empty array",
              "fullTitle": "isEmpty Test with empty array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty([])).to.equal(true)",
              "err": {},
              "uuid": "8ead59b4-1973-483c-8918-2f1718785f8b",
              "parentUUID": "d1796a26-eb8a-4c73-85a1-04111ae07730",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with empty string",
              "fullTitle": "isEmpty Test with empty string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty('')).to.equal(true)",
              "err": {},
              "uuid": "3e4008f2-77fc-40fd-9fbd-8e0b040e4239",
              "parentUUID": "d1796a26-eb8a-4c73-85a1-04111ae07730",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with string",
              "fullTitle": "isEmpty Test with string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty('abc')).to.equal(false)",
              "err": {},
              "uuid": "1d129df9-6240-4e83-81cd-c3b548b3b8d3",
              "parentUUID": "d1796a26-eb8a-4c73-85a1-04111ae07730",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with array",
              "fullTitle": "isEmpty Test with array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty([1,2,3])).to.equal(false)",
              "err": {},
              "uuid": "897c889a-7d42-46ee-a842-66a2c126b704",
              "parentUUID": "d1796a26-eb8a-4c73-85a1-04111ae07730",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with object",
              "fullTitle": "isEmpty Test with object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty({ 'a': 1 })).to.equal(false)",
              "err": {},
              "uuid": "b0a4360d-e089-4ac4-8976-9d825b1150d6",
              "parentUUID": "d1796a26-eb8a-4c73-85a1-04111ae07730",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with map",
              "fullTitle": "isEmpty Test with map",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty('a', 1)).to.equal(false)",
              "err": {},
              "uuid": "a1e45124-4508-44c7-ac3f-cf8a9cac1d62",
              "parentUUID": "d1796a26-eb8a-4c73-85a1-04111ae07730",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with map",
              "fullTitle": "isEmpty Test with map",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty()).to.equal(false)",
              "err": {
                "message": "AssertionError: expected true to equal false",
                "estack": "AssertionError: expected true to equal false\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/isEmpty.test.js:40:26)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": "- true\n+ false\n"
              },
              "uuid": "e174189e-c0ab-413d-8275-9a5c35128f42",
              "parentUUID": "d1796a26-eb8a-4c73-85a1-04111ae07730",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "03f10965-5de7-47c8-a985-aff8d5851007",
            "a9fabad6-8029-4659-9504-4f5453632e9f",
            "6ba8027e-62e1-4fb3-bdf5-ff90806f0ce7",
            "e004f0e1-c476-4ff3-a7ad-0c83be94a1a5",
            "8ead59b4-1973-483c-8918-2f1718785f8b",
            "3e4008f2-77fc-40fd-9fbd-8e0b040e4239",
            "1d129df9-6240-4e83-81cd-c3b548b3b8d3",
            "897c889a-7d42-46ee-a842-66a2c126b704",
            "b0a4360d-e089-4ac4-8976-9d825b1150d6",
            "a1e45124-4508-44c7-ac3f-cf8a9cac1d62"
          ],
          "failures": [
            "e174189e-c0ab-413d-8275-9a5c35128f42"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d364050f-748b-47de-8369-93b79291984c",
          "title": "memoize",
          "fullFile": "/Users/opa/testCourse/swTestingCourse2022/test/memoize.test.js",
          "file": "/test/memoize.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Test with normal objects",
              "fullTitle": "memoize Test with normal objects",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const memoizeFunc = memoize(vals);\nvar result1 = memoizeFunc(object);\nvar result2 = memoizeFunc(other);\nexpect(result1).to.eql([1,2]);\nexpect(result2).to.eql([3,4]);",
              "err": {},
              "uuid": "8dbb9e88-5e6e-4b01-b71c-fc41d25c1bb3",
              "parentUUID": "d364050f-748b-47de-8369-93b79291984c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with wrong type (no function)",
              "fullTitle": "memoize Test with wrong type (no function)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(()=> {(memoize(\"Memoize\"))}).to.throw('Expected a function');\nexpect(()=> {(memoize(1))}).to.throw('Expected a function');\nexpect(()=> {(memoize(undefined))}).to.throw('Expected a function');",
              "err": {},
              "uuid": "e29f8208-3566-4e0f-a48b-7aa46f93be1a",
              "parentUUID": "d364050f-748b-47de-8369-93b79291984c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test cache-setting",
              "fullTitle": "memoize Test cache-setting",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const memoizeFunc = memoize(vals);\nvar result1 = memoizeFunc(object);\nvar result2 = memoizeFunc(other);\nexpect(result1).to.eql([1,2]);\nexpect(result2).to.eql([3,4]);\nmemoizeFunc.cache.set(object, ['a', 'b'])\nmemoizeFunc.cache.set(other, ['c', 'd'])\nexpect(memoizeFunc(object)).to.eql(['a','b']);\nexpect(memoizeFunc(other)).to.eql(['c','d']);",
              "err": {},
              "uuid": "7cac2ef9-dd47-4e9e-8ee6-b60ba72ba567",
              "parentUUID": "d364050f-748b-47de-8369-93b79291984c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test output to remain when modifying object",
              "fullTitle": "memoize Test output to remain when modifying object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var anotherObj = {\"a\" : 5, \"b\" : 10};\nconst memoizeFunc = memoize(vals);\nconst referMemo = memoizeFunc(anotherObj);\nanotherObj.a = 10;\nconst result1 = memoizeFunc(anotherObj);\nexpect(result1).to.eql(referMemo);\nexpect(anotherObj).to.eql({\"a\" : 10, \"b\" : 10})",
              "err": {},
              "uuid": "780f7d10-38a8-43f9-ba3a-255bcc8acfcd",
              "parentUUID": "d364050f-748b-47de-8369-93b79291984c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8dbb9e88-5e6e-4b01-b71c-fc41d25c1bb3",
            "e29f8208-3566-4e0f-a48b-7aa46f93be1a",
            "7cac2ef9-dd47-4e9e-8ee6-b60ba72ba567",
            "780f7d10-38a8-43f9-ba3a-255bcc8acfcd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}