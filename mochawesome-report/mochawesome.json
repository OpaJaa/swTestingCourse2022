{
  "stats": {
    "suites": 8,
    "tests": 47,
    "passes": 31,
    "pending": 0,
    "failures": 16,
    "start": "2022-12-01T13:39:56.155Z",
    "end": "2022-12-01T13:39:56.169Z",
    "duration": 14,
    "testsRegistered": 47,
    "passPercent": 65.95744680851064,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "87c479d5-b32d-43b4-afc5-ac0c712ab18c",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a1ad0f84-15a0-4990-ab27-45acc01e255a",
          "title": "Add",
          "fullFile": "/Users/opa/testCourse/swTestingCourse2022/test/add.test.js",
          "file": "/test/add.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adds zero to positive number",
              "fullTitle": "Add Adds zero to positive number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(0,3)).to.equal(3)",
              "err": {},
              "uuid": "1d32fc95-5780-4a97-8e97-968c9b604b3e",
              "parentUUID": "a1ad0f84-15a0-4990-ab27-45acc01e255a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds positive number to zero",
              "fullTitle": "Add Adds positive number to zero",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(3,0)).to.equal(3)",
              "err": {},
              "uuid": "a04eb6c8-1511-4fed-8740-53b28a7b5876",
              "parentUUID": "a1ad0f84-15a0-4990-ab27-45acc01e255a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds zero to negative number",
              "fullTitle": "Add Adds zero to negative number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(0,-3)).to.equal(-3)",
              "err": {},
              "uuid": "96f9fa8f-3f59-4fed-97bf-b02a9702b349",
              "parentUUID": "a1ad0f84-15a0-4990-ab27-45acc01e255a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds negative number to zero",
              "fullTitle": "Add Adds negative number to zero",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(-3,0)).to.equal(-3)",
              "err": {},
              "uuid": "11d95907-86d0-4a79-98bb-b7448092e751",
              "parentUUID": "a1ad0f84-15a0-4990-ab27-45acc01e255a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds positive number to positive number",
              "fullTitle": "Add Adds positive number to positive number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(3,6)).to.equal(9)",
              "err": {},
              "uuid": "f4c30826-57fe-4b71-a040-e007a674c28f",
              "parentUUID": "a1ad0f84-15a0-4990-ab27-45acc01e255a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds negative number to negative number",
              "fullTitle": "Add Adds negative number to negative number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(-3,-6)).to.equal(-9)",
              "err": {},
              "uuid": "d068f838-30d3-4712-b7eb-76499eb1fe05",
              "parentUUID": "a1ad0f84-15a0-4990-ab27-45acc01e255a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds string to positive number",
              "fullTitle": "Add Adds string to positive number",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(add(\"abc\",6)).to.equal(RangeError)",
              "err": {
                "message": "AssertionError: expected 'abc6' to equal [Function RangeError]",
                "estack": "AssertionError: expected 'abc6' to equal [Function RangeError]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/add.test.js:27:29)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "f30eb7b6-fcca-4abe-8415-75e38a44cbb1",
              "parentUUID": "a1ad0f84-15a0-4990-ab27-45acc01e255a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds null to positive number",
              "fullTitle": "Add Adds null to positive number",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(add(null,6)).to.equal(RangeError)",
              "err": {
                "message": "AssertionError: expected 6 to equal [Function RangeError]",
                "estack": "AssertionError: expected 6 to equal [Function RangeError]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/add.test.js:30:28)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "eeadd6db-f023-4279-93eb-561efb74bf9b",
              "parentUUID": "a1ad0f84-15a0-4990-ab27-45acc01e255a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds boolean to positive number",
              "fullTitle": "Add Adds boolean to positive number",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(add(true,6)).to.equal(RangeError)",
              "err": {
                "message": "AssertionError: expected 7 to equal [Function RangeError]",
                "estack": "AssertionError: expected 7 to equal [Function RangeError]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/add.test.js:33:28)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "ea554beb-713b-4b3c-b30e-ee59d772f72a",
              "parentUUID": "a1ad0f84-15a0-4990-ab27-45acc01e255a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds positive decimal number to positive decimal number",
              "fullTitle": "Add Adds positive decimal number to positive decimal number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(1.25,2.25)).to.equal(3.5)",
              "err": {},
              "uuid": "f20a5e65-7f1a-4771-948c-580ef075858a",
              "parentUUID": "a1ad0f84-15a0-4990-ab27-45acc01e255a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds positive decimal number to negative decimal number",
              "fullTitle": "Add Adds positive decimal number to negative decimal number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(1.5,-2.25)).to.equal(-0.75)",
              "err": {},
              "uuid": "185dd346-dd73-4297-b11f-3c84e88fbc02",
              "parentUUID": "a1ad0f84-15a0-4990-ab27-45acc01e255a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds negative decimal number to negative decimal number",
              "fullTitle": "Add Adds negative decimal number to negative decimal number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(-1.5,-2)).to.equal(-3.5)",
              "err": {},
              "uuid": "e255e65b-59c6-4921-ab38-0c28d9b93dc1",
              "parentUUID": "a1ad0f84-15a0-4990-ab27-45acc01e255a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1d32fc95-5780-4a97-8e97-968c9b604b3e",
            "a04eb6c8-1511-4fed-8740-53b28a7b5876",
            "96f9fa8f-3f59-4fed-97bf-b02a9702b349",
            "11d95907-86d0-4a79-98bb-b7448092e751",
            "f4c30826-57fe-4b71-a040-e007a674c28f",
            "d068f838-30d3-4712-b7eb-76499eb1fe05",
            "f20a5e65-7f1a-4771-948c-580ef075858a",
            "185dd346-dd73-4297-b11f-3c84e88fbc02",
            "e255e65b-59c6-4921-ab38-0c28d9b93dc1"
          ],
          "failures": [
            "f30eb7b6-fcca-4abe-8415-75e38a44cbb1",
            "eeadd6db-f023-4279-93eb-561efb74bf9b",
            "ea554beb-713b-4b3c-b30e-ee59d772f72a"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "692dd169-1a92-41a1-8c48-041f750a41ff",
          "title": "Capitalize",
          "fullFile": "/Users/opa/testCourse/swTestingCourse2022/test/capitalize.test.js",
          "file": "/test/capitalize.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Test all lowercase in a string",
              "fullTitle": "Capitalize Test all lowercase in a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(\"hello\")).to.equal(\"Hello\")",
              "err": {},
              "uuid": "32f4d2ab-7045-4382-8be4-bd32243915f8",
              "parentUUID": "692dd169-1a92-41a1-8c48-041f750a41ff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test all uppercase in a string",
              "fullTitle": "Capitalize Test all uppercase in a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(\"HELLO\")).to.equal(\"Hello\")",
              "err": {},
              "uuid": "6d26e817-519d-4fbd-a86d-7eafe823dbd0",
              "parentUUID": "692dd169-1a92-41a1-8c48-041f750a41ff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test camelCase",
              "fullTitle": "Capitalize Test camelCase",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(\"helloWorld\")).to.equal(\"Helloworld\")",
              "err": {},
              "uuid": "40e3e9ec-c1e3-4f89-908c-14d2b9a6e23b",
              "parentUUID": "692dd169-1a92-41a1-8c48-041f750a41ff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test empty string",
              "fullTitle": "Capitalize Test empty string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(\"\")).to.equal(\"\")",
              "err": {},
              "uuid": "d686ce03-e119-4275-97ad-4f4a9043c6d5",
              "parentUUID": "692dd169-1a92-41a1-8c48-041f750a41ff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test one char lowercase",
              "fullTitle": "Capitalize Test one char lowercase",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(\"a\")).to.equal(\"A\")",
              "err": {},
              "uuid": "fa71733f-5cbb-4583-8d0e-e491c9e09f18",
              "parentUUID": "692dd169-1a92-41a1-8c48-041f750a41ff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test one char uppercase",
              "fullTitle": "Capitalize Test one char uppercase",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(\"B\")).to.equal(\"B\")",
              "err": {},
              "uuid": "2c1a4d0f-a600-4e94-85ca-b330b34dd1da",
              "parentUUID": "692dd169-1a92-41a1-8c48-041f750a41ff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test integer",
              "fullTitle": "Capitalize Test integer",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(1)).to.equal(RangeError)",
              "err": {
                "message": "AssertionError: expected '1' to equal [Function RangeError]",
                "estack": "AssertionError: expected '1' to equal [Function RangeError]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/capitalize.test.js:27:34)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "273376d2-61b0-48c8-8c17-cc6fb2825b39",
              "parentUUID": "692dd169-1a92-41a1-8c48-041f750a41ff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test float",
              "fullTitle": "Capitalize Test float",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(1.1)).to.equal(RangeError)",
              "err": {
                "message": "AssertionError: expected '1.1' to equal [Function RangeError]",
                "estack": "AssertionError: expected '1.1' to equal [Function RangeError]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/capitalize.test.js:30:36)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "2bb51943-996e-4796-9c71-e5b11a2345d6",
              "parentUUID": "692dd169-1a92-41a1-8c48-041f750a41ff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test boolean",
              "fullTitle": "Capitalize Test boolean",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(true)).to.equal(RangeError)",
              "err": {
                "message": "AssertionError: expected 'True' to equal [Function RangeError]",
                "estack": "AssertionError: expected 'True' to equal [Function RangeError]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/capitalize.test.js:33:37)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "61179ad9-0b47-4395-b09a-6dadd6c4f3ac",
              "parentUUID": "692dd169-1a92-41a1-8c48-041f750a41ff",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "32f4d2ab-7045-4382-8be4-bd32243915f8",
            "6d26e817-519d-4fbd-a86d-7eafe823dbd0",
            "40e3e9ec-c1e3-4f89-908c-14d2b9a6e23b",
            "d686ce03-e119-4275-97ad-4f4a9043c6d5",
            "fa71733f-5cbb-4583-8d0e-e491c9e09f18",
            "2c1a4d0f-a600-4e94-85ca-b330b34dd1da"
          ],
          "failures": [
            "273376d2-61b0-48c8-8c17-cc6fb2825b39",
            "2bb51943-996e-4796-9c71-e5b11a2345d6",
            "61179ad9-0b47-4395-b09a-6dadd6c4f3ac"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "dbe51852-82ff-4056-88ad-942926fc5633",
          "title": "Chunk",
          "fullFile": "/Users/opa/testCourse/swTestingCourse2022/test/chunk.test.js",
          "file": "/test/chunk.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Test with normal array, positive length",
              "fullTitle": "Chunk Test with normal array, positive length",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var testChunk = chunk(normalArray, 2);\n//console.log(testChunk);\nexpect(chunk(normalArray, 2)).to.equal([['a', 'b'], ['c', 'd']]);",
              "err": {
                "message": "AssertionError: expected [ [ 'c', 'd' ], undefined ] to equal [ [ 'a', 'b' ], [ 'c', 'd' ] ]",
                "estack": "AssertionError: expected [ [ 'c', 'd' ], undefined ] to equal [ [ 'a', 'b' ], [ 'c', 'd' ] ]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/chunk.test.js:13:38)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": " [\n   [\n+     \"a\"\n+     \"b\"\n+   ]\n+   [\n     \"c\"\n     \"d\"\n   ]\n ]\n"
              },
              "uuid": "bcde0591-821f-4b0b-81c9-b5058a16e419",
              "parentUUID": "dbe51852-82ff-4056-88ad-942926fc5633",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with normal array, longer length",
              "fullTitle": "Chunk Test with normal array, longer length",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var testChunk = chunk(normalArray, 5);\n//console.log(testChunk);\nexpect(chunk(normalArray, 2)).to.equal([['a'],['b'],['c'],['d']]);",
              "err": {
                "message": "AssertionError: expected [ [ 'c', 'd' ], undefined ] to equal [ [ 'a' ], [ 'b' ], [ 'c' ], [ 'd' ] ]",
                "estack": "AssertionError: expected [ [ 'c', 'd' ], undefined ] to equal [ [ 'a' ], [ 'b' ], [ 'c' ], [ 'd' ] ]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/chunk.test.js:18:38)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": " [\n   [\n+     \"a\"\n+   ]\n+   [\n+     \"b\"\n+   ]\n+   [\n     \"c\"\n+   ]\n+   [\n     \"d\"\n   ]\n ]\n"
              },
              "uuid": "f7372798-7d82-435a-915b-bb700a4fd764",
              "parentUUID": "dbe51852-82ff-4056-88ad-942926fc5633",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with odd array, positive length",
              "fullTitle": "Chunk Test with odd array, positive length",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var testChunk = chunk(oddArray, 4);\n//console.log(testChunk);\nexpect(chunk(oddArray, 4)).to.equal([['a'],['b'],['c'],['d', 'e']]);",
              "err": {
                "message": "AssertionError: expected [ [ 'e', undefined, …(2) ], undefined ] to equal [ [ 'a' ], [ 'b' ], [ 'c' ], …(1) ]",
                "estack": "AssertionError: expected [ [ 'e', undefined, …(2) ], undefined ] to equal [ [ 'a' ], [ 'b' ], [ 'c' ], …(1) ]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/chunk.test.js:23:35)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": " [\n   [\n+     \"a\"\n+   ]\n+   [\n+     \"b\"\n+   ]\n+   [\n+     \"c\"\n+   ]\n+   [\n+     \"d\"\n     \"e\"\n-     [undefined]\n-     [undefined]\n-     [undefined]\n   ]\n ]\n"
              },
              "uuid": "72d2b44c-ad4c-4b40-aedc-ff4cc484c3d0",
              "parentUUID": "dbe51852-82ff-4056-88ad-942926fc5633",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with empty array, positive length",
              "fullTitle": "Chunk Test with empty array, positive length",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testChunk = chunk(emptyArray, 2);\n//console.log(testChunk);\nexpect(chunk(emptyArray, 2)).to.eql([]);",
              "err": {},
              "uuid": "f842e494-05b1-4b77-ba13-5071328b8d49",
              "parentUUID": "dbe51852-82ff-4056-88ad-942926fc5633",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with normal array, no length",
              "fullTitle": "Chunk Test with normal array, no length",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var testChunk = chunk(normalArray);\n//console.log(testChunk);\nexpect(chunk(normalArray)).to.equal([['a'],['b'],['c'],['d']]);",
              "err": {
                "message": "AssertionError: expected [ [ 'd' ], undefined, undefined, …(1) ] to equal [ [ 'a' ], [ 'b' ], [ 'c' ], [ 'd' ] ]",
                "estack": "AssertionError: expected [ [ 'd' ], undefined, undefined, …(1) ] to equal [ [ 'a' ], [ 'b' ], [ 'c' ], [ 'd' ] ]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/chunk.test.js:33:35)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": " [\n   [\n+     \"a\"\n+   ]\n+   [\n+     \"b\"\n+   ]\n+   [\n+     \"c\"\n+   ]\n+   [\n     \"d\"\n   ]\n ]\n"
              },
              "uuid": "11b1bfe8-4d4a-49d1-b84c-490a9ab7a24d",
              "parentUUID": "dbe51852-82ff-4056-88ad-942926fc5633",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with empty array, no length",
              "fullTitle": "Chunk Test with empty array, no length",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var testChunk = chunk(normalArray);\n//console.log(testChunk);\nexpect(chunk(normalArray)).to.eql([]);",
              "err": {
                "message": "AssertionError: expected [ [ 'd' ], undefined, undefined, …(1) ] to deeply equal []",
                "estack": "AssertionError: expected [ [ 'd' ], undefined, undefined, …(1) ] to deeply equal []\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/chunk.test.js:38:35)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": "- [\n-   [\n-     \"d\"\n-   ]\n- ]\n+ []\n"
              },
              "uuid": "dbc3866a-bbfb-4c5a-9393-ab2e9c91f9ea",
              "parentUUID": "dbe51852-82ff-4056-88ad-942926fc5633",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with normal array, negative length",
              "fullTitle": "Chunk Test with normal array, negative length",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var testChunk = chunk(normalArray);\n//console.log(testChunk);\nexpect(chunk(normalArray)).to.equal([['a','b'],['c','d']]);",
              "err": {
                "message": "AssertionError: expected [ [ 'd' ], undefined, undefined, …(1) ] to equal [ [ 'a', 'b' ], [ 'c', 'd' ] ]",
                "estack": "AssertionError: expected [ [ 'd' ], undefined, undefined, …(1) ] to equal [ [ 'a', 'b' ], [ 'c', 'd' ] ]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/chunk.test.js:43:35)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": " [\n   [\n+     \"a\"\n+     \"b\"\n+   ]\n+   [\n+     \"c\"\n     \"d\"\n   ]\n ]\n"
              },
              "uuid": "36500336-1057-4149-bd50-f3bdcedf46c2",
              "parentUUID": "dbe51852-82ff-4056-88ad-942926fc5633",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with empty array, negative length",
              "fullTitle": "Chunk Test with empty array, negative length",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testChunk = chunk(normalArray, -2);\n//console.log(testChunk);\nexpect(chunk(normalArray, -2)).to.eql([]);",
              "err": {},
              "uuid": "9d3380c8-cdd7-4a8f-a2ed-61fead82e176",
              "parentUUID": "dbe51852-82ff-4056-88ad-942926fc5633",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with normal array, length as string",
              "fullTitle": "Chunk Test with normal array, length as string",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var testChunk = chunk(normalArray, '1');\n//console.log(testChunk);\nexpect(chunk(normalArray, '1')).to.equal([['a'],['b'],['c'],['d']]);",
              "err": {
                "message": "AssertionError: expected [ [ 'd' ], undefined, undefined, …(1) ] to equal [ [ 'a' ], [ 'b' ], [ 'c' ], [ 'd' ] ]",
                "estack": "AssertionError: expected [ [ 'd' ], undefined, undefined, …(1) ] to equal [ [ 'a' ], [ 'b' ], [ 'c' ], [ 'd' ] ]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/chunk.test.js:53:40)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": " [\n   [\n+     \"a\"\n+   ]\n+   [\n+     \"b\"\n+   ]\n+   [\n+     \"c\"\n+   ]\n+   [\n     \"d\"\n   ]\n ]\n"
              },
              "uuid": "a4b1278c-98bc-49d5-8a9c-01c6a8215bc3",
              "parentUUID": "dbe51852-82ff-4056-88ad-942926fc5633",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with normal array, length as alphaChar",
              "fullTitle": "Chunk Test with normal array, length as alphaChar",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testChunk = chunk(normalArray, 'a');\n//console.log(testChunk);\nexpect(chunk(normalArray, 'a')).to.eql([]);",
              "err": {},
              "uuid": "e3772356-ceec-48d0-8450-ff83a2486d69",
              "parentUUID": "dbe51852-82ff-4056-88ad-942926fc5633",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f842e494-05b1-4b77-ba13-5071328b8d49",
            "9d3380c8-cdd7-4a8f-a2ed-61fead82e176",
            "e3772356-ceec-48d0-8450-ff83a2486d69"
          ],
          "failures": [
            "bcde0591-821f-4b0b-81c9-b5058a16e419",
            "f7372798-7d82-435a-915b-bb700a4fd764",
            "72d2b44c-ad4c-4b40-aedc-ff4cc484c3d0",
            "11b1bfe8-4d4a-49d1-b84c-490a9ab7a24d",
            "dbc3866a-bbfb-4c5a-9393-ab2e9c91f9ea",
            "36500336-1057-4149-bd50-f3bdcedf46c2",
            "a4b1278c-98bc-49d5-8a9c-01c6a8215bc3"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "08eabde6-8b59-4b69-a035-e36d688ea923",
          "title": "countBy",
          "fullFile": "/Users/opa/testCourse/swTestingCourse2022/test/countBy.test.js",
          "file": "/test/countBy.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Test with normal collection, working function",
              "fullTitle": "countBy Test with normal collection, working function",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var testCountBy = countBy(normalCollection, value => value.active);\n//console.log(testCountBy);\nexpect(countBy(normalCollection, value => value.active)).to.equal({'true': 2, 'false': 1});",
              "err": {
                "message": "AssertionError: expected { true: 1, false: +0 } to equal { true: 2, false: 1 }",
                "estack": "AssertionError: expected { true: 1, false: +0 } to equal { true: 2, false: 1 }\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/countBy.test.js:16:65)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": " {\n-   \"false\": 0\n-   \"true\": 1\n+   \"false\": 1\n+   \"true\": 2\n }\n"
              },
              "uuid": "805c2a78-4848-49cb-b603-c972ac28bcbf",
              "parentUUID": "08eabde6-8b59-4b69-a035-e36d688ea923",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with normal collection, incorrect function",
              "fullTitle": "countBy Test with normal collection, incorrect function",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var testCountBy = countBy(normalCollection, wrong => wrong.nothing);\n//console.log(testCountBy);\nexpect(countBy(normalCollection, wrong => wrong.nothing)).to.eql({});",
              "err": {
                "message": "AssertionError: expected { undefined: 2 } to deeply equal {}",
                "estack": "AssertionError: expected { undefined: 2 } to deeply equal {}\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/countBy.test.js:21:66)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": "- {\n-   \"undefined\": 2\n- }\n+ {}\n"
              },
              "uuid": "afaccb48-e5b8-40c5-8b36-4db71f51825c",
              "parentUUID": "08eabde6-8b59-4b69-a035-e36d688ea923",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with empty collection, working function",
              "fullTitle": "countBy Test with empty collection, working function",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testCountBy = countBy(emptyCollection, value => value.active);\n//console.log(testCountBy);\nexpect(countBy(emptyCollection, value => value.active)).to.eql({});",
              "err": {},
              "uuid": "0ebd998b-13f4-42c4-a970-098240c956dd",
              "parentUUID": "08eabde6-8b59-4b69-a035-e36d688ea923",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with empty collection, incorrect function",
              "fullTitle": "countBy Test with empty collection, incorrect function",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testCountBy = countBy(emptyCollection, wrong => wrong.nothing);\n//console.log(testCountBy);\nexpect(countBy(emptyCollection, wrong => wrong.nothing)).to.eql({});",
              "err": {},
              "uuid": "2262849f-0eb6-471c-9870-537b499a4d7a",
              "parentUUID": "08eabde6-8b59-4b69-a035-e36d688ea923",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0ebd998b-13f4-42c4-a970-098240c956dd",
            "2262849f-0eb6-471c-9870-537b499a4d7a"
          ],
          "failures": [
            "805c2a78-4848-49cb-b603-c972ac28bcbf",
            "afaccb48-e5b8-40c5-8b36-4db71f51825c"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9f792ba4-1638-47d8-96c6-979c716dae10",
          "title": "difference",
          "fullFile": "/Users/opa/testCourse/swTestingCourse2022/test/difference.test.js",
          "file": "/test/difference.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Test with similar arrays",
              "fullTitle": "difference Test with similar arrays",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testDifference = difference(normalArray1, normalArray1);\n//console.log(testDifference);\nexpect(difference(normalArray1, normalArray1)).to.eql([]);",
              "err": {},
              "uuid": "0cda58dc-a640-4190-9f65-1931a5ec2b00",
              "parentUUID": "9f792ba4-1638-47d8-96c6-979c716dae10",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with two arrays",
              "fullTitle": "difference Test with two arrays",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testDifference = difference(normalArray1, normalArray2);\n//console.log(testDifference);\nexpect(difference(normalArray1, normalArray2)).to.eql([1,2]);",
              "err": {},
              "uuid": "e6dcb14e-239c-4a79-8980-58f9f65e2233",
              "parentUUID": "9f792ba4-1638-47d8-96c6-979c716dae10",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with empty arrays",
              "fullTitle": "difference Test with empty arrays",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testDifference = difference(emptyArray, emptyArray);\n//console.log(testDifference);\nexpect(difference(emptyArray, emptyArray)).to.eql([]);",
              "err": {},
              "uuid": "30d6b4cc-a436-4d5c-a197-11121463b538",
              "parentUUID": "9f792ba4-1638-47d8-96c6-979c716dae10",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with non-arrays",
              "fullTitle": "difference Test with non-arrays",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testDifference = difference(nonArray, nonArray);\n//console.log(testDifference);\nexpect(difference(nonArray, nonArray)).to.eql([]);",
              "err": {},
              "uuid": "beecd04a-87de-463f-9573-0252247b1379",
              "parentUUID": "9f792ba4-1638-47d8-96c6-979c716dae10",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0cda58dc-a640-4190-9f65-1931a5ec2b00",
            "e6dcb14e-239c-4a79-8980-58f9f65e2233",
            "30d6b4cc-a436-4d5c-a197-11121463b538",
            "beecd04a-87de-463f-9573-0252247b1379"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a6d2b9e2-9216-448a-a7e7-6f801050d5da",
          "title": "drop",
          "fullFile": "/Users/opa/testCourse/swTestingCourse2022/test/drop.test.js",
          "file": "/test/drop.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Test with normal array, positive number",
              "fullTitle": "drop Test with normal array, positive number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testDrop = drop(normalArray, 2);\n//console.log(testDrop);\nexpect(drop(normalArray, 2)).to.eql([3,4]);",
              "err": {},
              "uuid": "dd592a76-dcc1-4051-9f63-b0f83266fd81",
              "parentUUID": "a6d2b9e2-9216-448a-a7e7-6f801050d5da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with normal array, bigger number",
              "fullTitle": "drop Test with normal array, bigger number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testDrop = drop(normalArray, 2);\n//console.log(testDrop);\nexpect(drop(normalArray, 5)).to.eql([]);",
              "err": {},
              "uuid": "2aef09ef-ec38-4456-9546-cc3a0d3a4260",
              "parentUUID": "a6d2b9e2-9216-448a-a7e7-6f801050d5da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with normal array, negative number",
              "fullTitle": "drop Test with normal array, negative number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testDrop = drop(normalArray, -2);\n//console.log(testDrop);\nexpect(drop(normalArray, 2)).to.eql([3,4]);",
              "err": {},
              "uuid": "a8842e22-f929-4f8a-ab83-c156d7df09b1",
              "parentUUID": "a6d2b9e2-9216-448a-a7e7-6f801050d5da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with empty array, bigger number",
              "fullTitle": "drop Test with empty array, bigger number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testDrop = drop(emptyArray, 2);\n//console.log(testDrop);\nexpect(drop(emptyArray, 5)).to.eql([]);",
              "err": {},
              "uuid": "97b46e3f-b315-4fb0-a59f-d80b5e9d61bc",
              "parentUUID": "a6d2b9e2-9216-448a-a7e7-6f801050d5da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with non-array, char as number",
              "fullTitle": "drop Test with non-array, char as number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testDrop = drop(nonArray, 'r');\n//console.log(testDrop);\nexpect(drop(nonArray, 'r')).to.eql(['a','r','r','a','y']);",
              "err": {},
              "uuid": "31bed98c-205c-451a-b263-0c873528ea35",
              "parentUUID": "a6d2b9e2-9216-448a-a7e7-6f801050d5da",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dd592a76-dcc1-4051-9f63-b0f83266fd81",
            "2aef09ef-ec38-4456-9546-cc3a0d3a4260",
            "a8842e22-f929-4f8a-ab83-c156d7df09b1",
            "97b46e3f-b315-4fb0-a59f-d80b5e9d61bc",
            "31bed98c-205c-451a-b263-0c873528ea35"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4bb03714-68b3-4edb-86e9-af1bb3ebeae5",
          "title": "Filter",
          "fullFile": "/Users/opa/testCourse/swTestingCourse2022/test/filter.test.js",
          "file": "/test/filter.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Test with empty array",
              "fullTitle": "Filter Test with empty array",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(filter(users,({ active }) => active)).to.equal([ { user: 'barney', active: true } ])",
              "err": {
                "message": "AssertionError: expected [ { user: 'barney', active: true } ] to equal [ { user: 'barney', active: true } ]",
                "estack": "AssertionError: expected [ { user: 'barney', active: true } ] to equal [ { user: 'barney', active: true } ]\n    at Context.<anonymous> (file:///Users/opa/testCourse/swTestingCourse2022/test/filter.test.js:13:54)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": ""
              },
              "uuid": "a7e4b014-a536-4972-a3f7-4eaac1962364",
              "parentUUID": "4bb03714-68b3-4edb-86e9-af1bb3ebeae5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "a7e4b014-a536-4972-a3f7-4eaac1962364"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "991ca10f-7e02-4801-982c-73f2c3f054e0",
          "title": "memoize",
          "fullFile": "/Users/opa/testCourse/swTestingCourse2022/test/memoize.test.js",
          "file": "/test/memoize.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Test with normal objects",
              "fullTitle": "memoize Test with normal objects",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const memoizeFunc = memoize(vals);\n//console.log(memoizeFunc(object));\n//console.log(memoizeFunc(other));\nvar result1 = memoizeFunc(object);\nvar result2 = memoizeFunc(other);\nexpect(result1).to.eql([1,2]);\nexpect(result2).to.eql([3,4]);",
              "err": {},
              "uuid": "26b8db1e-562c-4b82-920d-7b0bc6d4c2fe",
              "parentUUID": "991ca10f-7e02-4801-982c-73f2c3f054e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test with wrong type (no function)",
              "fullTitle": "memoize Test with wrong type (no function)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(()=> {(memoize(\"Memoize\"))}).to.throw('Expected a function');\nexpect(()=> {(memoize(1))}).to.throw('Expected a function');\nexpect(()=> {(memoize(undefined))}).to.throw('Expected a function');",
              "err": {},
              "uuid": "36441a87-63e4-461f-b723-85b5de9d1acb",
              "parentUUID": "991ca10f-7e02-4801-982c-73f2c3f054e0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "26b8db1e-562c-4b82-920d-7b0bc6d4c2fe",
            "36441a87-63e4-461f-b723-85b5de9d1acb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}